-- --------------------------------------------
-- CALLING PROCEDURES
-- --------------------------------------------

-- ~~~~~~~~~~~~~~~~~~~~~
-- !!!! TLDR !!!!

-- INSERTS PERSON INTO PERSON TABLE, THEIR ASSOCIATED PERSON TYPE TABLE, AND CREATES/ADDS THEIR LOGIN-INFORMATION ( IF APPLICABLE)
-- CALL WITH FIRST NAME, LAST NAME, PERSON TYPE (CASE INSENSITIVE), EMAIL, PHONE, NOTES (PATIENT ONLY)
CALL ADD_PERSON("Vicki","Burch","SCHEDULER", NULL, NULL, NULL); -- FOR SCHEDULER; EMAIL AND PHONE CAN BE NULL OR NOT
CALL ADD_PERSON("Vicki","Burch","ADMINISTRATOR", NULL, NULL, NULL); -- FOR ADMINISTRATOR; EMAIL AND PHONE CAN BE NULL OR NOT
CALL ADD_PERSON("Vicki","Burch","THERAPIST", NULL, "TESTING", NULL); -- FOR THERAPIST; EMAIL COULD BE NULL OR NOT
CALL ADD_PERSON("Vicki","Burch","PATIENT", "TEST", "TESTING", NULL); -- FOR PATIENT; NOTES COULD BE NULL OR NOT

-- LOADS AVAILABLE THERAPIST INFO FOR RETRIEVAL TO SCHEDULE APPOINTMENT.
-- CALL WITH THERAPY TYPE (CASE INSENSITIVE), DATE (MUST BE YYYY-MM-DD format), TIME (MILITARY TIME)
-- !!! NOTE: MUST CALL BEFORE CALLING GET_THERAPISTS FUNCTION !!!
CALL GET_THERAPISTS_PROC("Exercise Therapy", "2024-09-30", "14:00:00");

-- IF FIRST PARAMETER IS NULL CREATE PATIENT APPOINTMENT USING MOST RECENT PATIENT_ID IN PATIENT TABLE AND INPUT PARAMETERS
-- IF FIRST PARAMETER IS NOT NULL CREATE PATIENT APPOINTMENT FOR PROVIDED PATIENT_ID IN PATIENT TABLE AND INPUT PARAMETERS
-- CALL WITH PATIENT_ID (OPTIONAL), THERAPIST ID (FROM GET_THERAPISTS FUNCTION), APPT DAY, APPT START TIME, THERAPY TYPE (CASE INSENSITIVE), AND APPT NOTES
-- !!! NOTE: IF NULL PATIENT_ID... CALL RIGHT AFTER ADDING PATIENT USING ADD_PERSON PROCEDURE BEFORE ADDING ANOTHER PATIENT !!!
-- !!! NOTE: THIS PROCEDURE CALLS GET_THERAPISTS_PROC TO CHECK ACTUAL THERAPIST AVAILABILITY !!!
CALL CREATE_APPOINTMENT(NULL, 6, "2024-09-30", "14:00:00", "Exercise Therapy", NULL);
CALL CREATE_APPOINTMENT(25, 6, "2024-09-30", "14:00:00", "Exercise Therapy", "THIS USES A PATIENT ID");

-- CALL AT ANY TIME TO REMOVE COMPLETED APPOINTMENTS AND PATIENTS COMPARING APPOINTMENT DATE/TIME TO SYSTEM DATE/TIME
CALL REMOVE_PATIENTS();

-- DELETES APPOINTMENT WITH PROVIDED APPOINTMENT ID
-- BEST TO USE AFTER USING RETURN_PATIENT_APPTS FUNCTION WHICH RETURNS APPOINTMENT ID(S)
CALL CANCEL_APPOINTMENT(48);

-- MODIFY APPOINTMENT INFO BASED ON PROVIDED APPOINTMENT ID (THE OTHER PARAMETERS ARE ALL OPTIONAL)
-- CALL WITH APPOINTMENT ID (NOT OPTIONAL), NEW APPT DAY, NEW APPT START TIME, NEW THERAPY TYPE (CASE INSENSITIVE), NEW THERAPIST ID, NEW APPT NOTES
CALL MODIFY_APPOINTMENT(51, "2024-11-08", "12:00:00", "hand THERAPY", 6, "THIS IS A TEST OF THE MODIFICATION PROC");

-- MODIFY PATIENT INFO BASED ON PROVIDED PATIENT ID (THE OTHER PARAMETERS ARE ALL OPTIONAL) // GET PATIENT ID WITH FIND_PATIENT FUNCTION
-- CALL WITH PATIENT ID (NOT OPTIONAL), NEW FIRST NAME, NEW LAST NAME, NEW PHONE NUMBER, NEW EMAIL, NEW PATIENT NOTES
CALL MODIFY_PATIENT(27, "JOEY", "DOEY", "888-888-8888", "TEST@EMAIL.COM", "THIS IS A TEST OF THE MODIFY PATIENT PROC");

-- ADD AVAILABILITY TO SCHEDULE TABLE IF THE THERAPIST ID DOES NOT ALREADY HAVE ONE FOR THIS DAY AND TIMEFRAME
-- CALL WITH THERAPIST ID, SCHEDULE DAY, SCHEDULE START TIME, AND SCHEDULE END TIME
CALL ADD_THERAPIST_AVAILABILITY(6, "2024-11-06", "08:00:00", "13:00:00");

-- REMOVE AVAILABILITY FROM SCHEDULE TABLE
-- CALL WITH THERAPIST ID AND SCHEDULE DAY // NOT OPTIONAL
-- AUTOMATICALLY ASSIGNS THERAPIST 0 TO APPTS THAT WERE IN THIS AVAILABILITY (I.E. CONFLICTING APPTS)
CALL CANCEL_AVAILABILITY(25, "2024-11-09");

-- MODIFY UNAVAILABLE SCHEDULE DAY AND/OR TIMES IF IT EXISTS IN PATIENT APPOINTMENT TABLE OR CREATE IT IF IT DOES NOT // GET WITH RETURN_SCHEDULE_INFORMATION
-- ONLY UPDATES/CREATES THIS RECORD IF THERE ARE NO CONFLICTING APPTS
-- CALL WITH THERAPIST ID (NOT OPTIONAL), SCHEDULE DAY (TO CHANGE/CREATE; NOT OPTIONAL), CURRENT START TIME (NOT OPTIONAL IF MODIFYING EXISTING), CURRENT END TIME, NEW DAY (OPTIONAL), NEW START TIME (OPTIONAL), NEW END TIME (OPTIONAL)
CALL MODIFY_SCHEDULE(6, '2024-11-21', NULL, NULL, NULL, '11:00:00', '12:00:00');
	-- CREATE UNAVAILABILITY RECORD FOR 2024-11-21 FROM 11-12
CALL MODIFY_SCHEDULE(6, '2024-11-21', '11:00:00', '12:00:00', NULL, '10:00:00', NULL);
	-- MODIFY UNAVAILABILITY RECORD FOR 2024-11-21 STARTING AT 11 AND ENDING AT 12 TO START AT 10 ON THE SAME DAY ENDING AT THE SAME TIME
CALL MODIFY_SCHEDULE(6, '2024-11-21', '10:00:00', '12:00:00' NULL, '00:00:00', '00:00:00');
	-- DELETE UNAVAILABILITY RECORD FOR 2024-11-21 STARTING AT 10 AND ENDING AT 12

-- ADD/MODIFY/DELETE THERAPIST DEFAULT SCHEDULE
-- CALL WITH THERAPIST ID, DAY OF THE WEEK (FULL DAY NAME OR FIRST THREE CHARACTERS), START TIME (OPTIONAL), END TIME (OPTIONAL)
-- !!! NOTE: CALL WITH TIME(S) TO ADD/MODIFY TIMES // CALL WITH 0'S TO DELETE TIME(S) - EXAMPLE BELOW !!!
CALL UPDATE_DEFAULT_SCHED(25, "MONDAY", "09:00:00", "13:00:00");
-- EX OF ONLY UPDATING/ADDING A TIME: 
	CALL UPDATE_DEFAULT_SCHED(25, "MON", "09:00:00", NULL);
-- EX OF DELETING DEFAULT START AND END TIME FOR A DAY: 
	CALL UPDATE_DEFAULT_SCHED(25, "MONDAY", "00:00:00", "00:00:00");

-- UPDATES THERAPIST_APPOINTMENT TABLE WITH A LIST OF ALL THERAPIST'S APPOINTMENTS IN THE PATIENT_APPOINTMENTS TABLE
-- CALL WITH THERAPIST ID
CALL UPDATE_THERAPIST_APPTS(6);

-- DELETE PERSON ASSOCIATED WITH PASSED IN PERSON ID AND ALL ASSOCIATED DATA 
-- (I.E. IF PERSON IS THERAPIST IT DELETES THERAPIST RECORD, PATIENT APPOINTMENTS WITH THIS THERAPIST, ETC.)
CALL DELETE_PERSON(1);

-- EDITS USER INFORMATION // ALL PARAMETERS BESIDES PERSON ID ARE OPTIONAL
-- CALL WITH PERSON ID (REQUIRED), NEW FIRST NAME, NEW LAST NAME, NEW USER NAME, NEW PASSWORD, NEW EMAIL, NEW PHONE
CALL EDIT_PERSON (6, "NEW", "NAME", "NEW_N", "NEW_PASS", "NEW@EMAIL", NULL)

-- RETURNS PASSED IN THERAPIST'S CERTIFICATIONS
-- CALL WITH THERAPIST ID (REQUIRED) AND OUT PARAMETER
-- IF CALLED WITH INVALID THERAPIST ID OUT PARAMETER IS "NOT A VALID THERAPIST ID" // IF THERAPIST HAS NO CERTS OUT PARAMETER IS "NO CERTS FOUND"
CALL GET_THERAPIST_CERTS(6, @CERT_STRING);
-- SELECT OUT PARAMETER STRING RETURNED
SELECT @CERT_STRING;
-- EX: RETURNS 'AET, CHT, CREX, CSCS, CYT, LMT, OCS, SCS, WCS'

-- ADDS/DELETES CERTS FOR THE BUSINESS
-- TO ADD CALL WITH CERT NAME (ABBREVIATION // MAX 15 CHARACTERS), CERT DESCRIPTION (MAX 100 CHARACTERS), THERAPY TYPE (MAX 30 CHARACTERS), 'A' (ADD)
CALL MANAGE_SYSTEM_CERTS('TEST', 'THIS IS A TEST OF ADD CERT', 'TEST THERAPY', 'A');
-- TO DELETE CALL WITH CERT NAME (ABBREVIATION) AND 'D' (DELETE) // OTHER PARAMETERS ARE NOT REQUIRED
CALL MANAGE_SYSTEM_CERTS('TEST', NULL, NULL, 'D');

-- ADDS/REMOVES CERTS FOR A THERAPIST
-- TO ADD CALL WITH THERAPIST ID, CERT NAME (ABBREVIATION), 'A' (ADD)
CALL MANAGE_THERAPIST_CERTS(6, "TEST", 'A');
-- TO REMOVE CALL WITH THERAPIST ID, CERT NAME (ABBREVIATION), 'D' (DELETE)
CALL MANAGE_THERAPIST_CERTS(6, "TEST", 'D');

-- ADD THERAPIST REVIEW // UPDATES THERAPIST'S CURRENT REVIEW TO PASSED IN REVIEW AND ADDS 1 TO REVIEW COUNT
-- CALL WITH THERAPIST ID AND RATING
call ADD_THERAPIST_REVIEW(6, 4);

-- !!!! TLDR !!!!
-- ~~~~~~~~~~~~~~~~~~~~~

-- --------------------------------------------
-- CALLING PROCEDURES
-- --------------------------------------------

CREATE DEFINER=`root`@`localhost` PROCEDURE `ADD_PERSON`(IN P_F_NAME VARCHAR(30), IN P_L_NAME VARCHAR(30), IN P_TYPE VARCHAR(15), IN P_EMAIL VARCHAR(100), P_PHONE VARCHAR(20), P_NOTES VARCHAR(300))
BEGIN
-- REMOVED "IN P_ID CHAR(7)," FROM FIRST IN PARAMETERS

DECLARE PASSWORD_ID INT;
DECLARE TEMP_ID INT;

DECLARE CERT_COUNT INT;
DECLARE TEMP_COUNT INT DEFAULT 1;

SELECT MAX(PERSON_ID) INTO TEMP_ID FROM PERSON;

IF TEMP_ID IS NULL THEN
	SET @ID = 1;
ELSE
	SET @ID = TEMP_ID + 1;
END IF;

SET @FIRST = P_F_NAME;
SET @LAST = P_L_NAME;
SET @TYPE = UPPER(P_TYPE);
SET @EMAIL = P_EMAIL;
SET @PHONE = P_PHONE;
SET @NOTES = P_NOTES;

INSERT INTO PERSON VALUES (@ID, @FIRST, @LAST, @TYPE);

IF (@TYPE IN ("SCHEDULER", "ADMINISTRATOR", "THERAPIST")) THEN    
    SET @PASSWORD_CHECK = 0;
	WHILE @PASSWORD_CHECK = 0 DO
		SET @PASSWORD = FLOOR(RAND() * 999999);
		SELECT PERSON_ID INTO PASSWORD_ID FROM LOGIN_INFORMATION WHERE USER_PASSWORD = @PASSWORD;
		IF (PASSWORD_ID IS NULL) THEN
			SET @PASSWORD_CHECK = 1;
		END IF;
	END WHILE;
    
	INSERT INTO LOGIN_INFORMATION VALUES (@ID, CONCAT(@FIRST,LEFT(@LAST, 1)), @PASSWORD);
END IF;

IF @TYPE = "SCHEDULER" THEN
	INSERT INTO SCHEDULER VALUES (DEFAULT, @ID, @EMAIL, @PHONE);
ELSEIF @TYPE = "ADMINISTRATOR" THEN
	INSERT INTO ADMINISTRATOR VALUES (DEFAULT, @ID, @EMAIL, @PHONE);
ELSEIF @TYPE = "THERAPIST" THEN
	INSERT INTO THERAPIST VALUES (DEFAULT, @ID, @EMAIL, @PHONE);
    
    SELECT MAX(THERAPIST_ID) INTO @ID FROM THERAPIST;
    INSERT INTO DEFAULT_SCHEDULE VALUES (@ID, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    INSERT INTO THERAPIST_APPOINTMENTS VALUES (@ID, NULL);
    INSERT INTO THERAPIST_RATINGS VALUES (@ID, NULL, NULL);
    
    -- INSERT INTO THERAPIST_CERTIFICATIONS VALUES (@ID, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    
	SET @T_ID = @ID;
	SELECT COUNT(*) INTO CERT_COUNT FROM CERTIFICATIONS;

	IF CERT_COUNT > 0 THEN

		SET @CERT_STRING = "'N'";
		SET TEMP_COUNT = 2;

		WHILE TEMP_COUNT <= CERT_COUNT DO
			SET @CERT_STRING = CONCAT(@CERT_STRING, ", 'N'");
			
			SET TEMP_COUNT = TEMP_COUNT + 1;
		END WHILE;

		SET @QRY = CONCAT("INSERT INTO THERAPIST_CERTIFICATIONS VALUES (", @T_ID, ", ", @CERT_STRING, ")");
		PREPARE STMT FROM @QRY;
		EXECUTE STMT;
		deallocate prepare STMT;

	END IF;
    
ELSE
	INSERT INTO PATIENT VALUES (DEFAULT, @ID, @EMAIL, @PHONE, @NOTES);
END IF;

END


CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_THERAPISTS_PROC`(IN THERAPY VARCHAR(30), IN T_DATE DATE, IN T_TIME TIME)
BEGIN

DECLARE CERT VARCHAR(15);

SELECT CERT_NAME INTO CERT
FROM CERTIFICATIONS
WHERE UPPER(THERAPY_TYPE) = UPPER(THERAPY);

CALL GET_THERAPIST_INFO(CERT, T_DATE, T_TIME, @T_COUNT, @T_ID);

END


CREATE DEFINER=`root`@`localhost` PROCEDURE `CREATE_APPOINTMENT`(IN PT_ID INT, IN T_ID INT, APPT_DAY DATE, APPT_START TIME, T_TYPE VARCHAR(30), APPT_NOTES VARCHAR(300))
BEGIN

DECLARE P_ID INT;
DECLARE APPT_END TIME;

IF PT_ID IS NOT NULL THEN
	SET P_ID = PT_ID;
ELSE
	SELECT MAX(PATIENT_ID) INTO P_ID FROM PATIENT;
END IF;

select THERAPY_TYPE INTO T_TYPE FROM CERTIFICATIONS WHERE UPPER(THERAPY_TYPE) = UPPER(T_TYPE);

SET APPT_END = addtime(APPT_START, "01:00:00");

CALL GET_THERAPISTS_PROC(T_TYPE, APPT_DAY, APPT_START);

IF T_ID IN (SELECT T_ID FROM TEMP_TABLE) THEN
	IF P_ID NOT IN (SELECT PATIENT_ID 
					FROM PATIENT_APPOINTMENT 
					WHERE APPT_DAY = APPT_DAY
						AND (APPT_START_TIME = APPT_START AND APPT_END_TIME = APPT_END 
						OR APPT_START_TIME > APPT_START AND APPT_START_TIME < APPT_END 
						OR APPT_END_TIME > APPT_START AND APPT_END_TIME < APPT_END)) THEN
                        
    INSERT INTO PATIENT_APPOINTMENT VALUES
	(DEFAULT, P_ID, T_ID, APPT_DAY, APPT_START, APPT_END, T_TYPE, APPT_NOTES);
    
	END IF;
END IF;

END


CREATE DEFINER=`root`@`localhost` PROCEDURE `REMOVE_PATIENTS`()
BEGIN

DELETE FROM PERSON WHERE PERSON_ID IN 
(
	SELECT PERSON_ID FROM PATIENT WHERE PATIENT_ID NOT IN
	(    
		SELECT PATIENT_ID FROM PATIENT_APPOINTMENT WHERE APPT_DAY > CURRENT_DATE() OR APPT_END_TIME > CURRENT_TIME() AND APPT_DAY = CURRENT_DATE()
	)
    AND PATIENT_ID != 0
);

DELETE FROM PATIENT_APPOINTMENT WHERE PATIENT_ID != 0 AND (APPT_DAY < CURRENT_DATE() OR APPT_END_TIME <= CURRENT_TIME() AND APPT_DAY = CURRENT_DATE());

-- DELETE FROM PERSON WHERE PERSON_ID NOT IN (SELECT PERSON_ID FROM PATIENT WHERE PATIENT_ID IN (SELECT PATIENT_ID FROM PATIENT_APPOINTMENT));

END


CREATE DEFINER=`root`@`localhost` PROCEDURE `CANCEL_APPOINTMENT`(IN A_ID INT)
BEGIN

	DELETE FROM PATIENT_APPOINTMENT WHERE APPT_ID = A_ID;

END


CREATE DEFINER=`root`@`localhost` PROCEDURE `MODIFY_APPOINTMENT`(IN A_ID INT, IN A_DAY DATE, IN S_TIME TIME, IN T_TYPE VARCHAR(30), IN T_ID INT, IN NOTES VARCHAR(300))
BEGIN

DECLARE E_TIME TIME;

IF A_DAY IS NOT NULL THEN
	UPDATE PATIENT_APPOINTMENT
    SET APPT_DAY = A_DAY
    WHERE APPT_ID = A_ID;
END IF;

IF S_TIME IS NOT NULL THEN
	SET E_TIME = addtime(S_TIME, "01:00:00");

	UPDATE PATIENT_APPOINTMENT
    SET APPT_START_TIME = S_TIME,
		APPT_END_TIME = E_TIME
    WHERE APPT_ID = A_ID;
END IF;

IF T_TYPE IS NOT NULL THEN
	select THERAPY_TYPE INTO T_TYPE FROM CERTIFICATIONS WHERE UPPER(THERAPY_TYPE) = UPPER(T_TYPE);

	UPDATE PATIENT_APPOINTMENT
    SET THERAPY_TYPE = T_TYPE
    WHERE APPT_ID = A_ID;
END IF;

IF T_ID IS NOT NULL THEN
	UPDATE PATIENT_APPOINTMENT
    SET THERAPIST_ID = T_ID
    WHERE APPT_ID = A_ID;
END IF;

IF NOTES IS NOT NULL THEN
	UPDATE PATIENT_APPOINTMENT
    SET APPT_NOTES = NOTES
    WHERE APPT_ID = A_ID;
END IF;

END


CREATE DEFINER=`root`@`localhost` PROCEDURE `MODIFY_PATIENT`(IN PT_ID INT, IN F_NAME VARCHAR(30), IN L_NAME VARCHAR(30), IN PHONE VARCHAR(20), IN EMAIL VARCHAR(100), IN NOTES VARCHAR(300))
BEGIN

DECLARE P_ID INT;

DECLARE COUNT INT;
DECLARE TEMP_COUNT INT DEFAULT 1;

DECLARE TEMP_P_ID INT;
DECLARE TEMP_PT_ID INT;

DECLARE TEMP_P_IDS VARCHAR(150);
DECLARE TEMP_PT_IDS VARCHAR(150);
DECLARE P_IDS VARCHAR(150);
DECLARE PT_IDS VARCHAR(150);

SELECT PERSON_ID INTO P_ID FROM PATIENT WHERE PATIENT_ID = PT_ID;

SELECT COUNT(*) INTO COUNT FROM PERSON, PATIENT
WHERE FIRST_NAME = (SELECT FIRST_NAME FROM PERSON WHERE PERSON_ID = P_ID)
AND LAST_NAME = (SELECT LAST_NAME FROM PERSON WHERE PERSON_ID = P_ID)
AND PATIENT_PHONE = (SELECT PATIENT_PHONE FROM PATIENT WHERE PATIENT_ID = PT_ID)
AND PATIENT_EMAIL = (SELECT PATIENT_EMAIL FROM PATIENT WHERE PATIENT_ID = PT_ID)
AND PATIENT.PERSON_ID = PERSON.PERSON_ID
;

-- SELECT COUNT;

WHILE TEMP_COUNT <= COUNT DO

	WITH MY_CTE AS 
	(
		SELECT PATIENT.PERSON_ID, PATIENT_ID, row_number() OVER ( order by PATIENT.PERSON_ID ) as ROWNUM FROM PERSON, PATIENT
		WHERE FIRST_NAME = (SELECT FIRST_NAME FROM PERSON WHERE PERSON_ID = P_ID)
		AND LAST_NAME = (SELECT LAST_NAME FROM PERSON WHERE PERSON_ID = P_ID)
		AND PATIENT_PHONE = (SELECT PATIENT_PHONE FROM PATIENT WHERE PATIENT_ID = PT_ID)
		AND PATIENT_EMAIL = (SELECT PATIENT_EMAIL FROM PATIENT WHERE PATIENT_ID = PT_ID)
		AND PATIENT.PERSON_ID = PERSON.PERSON_ID
	)
	SELECT PERSON_ID, PATIENT_ID
	INTO TEMP_P_ID, TEMP_PT_ID
	FROM    MY_CTE
	WHERE   ROWNUM = TEMP_COUNT;
    
    IF (TEMP_COUNT = 1) THEN
		SET P_IDS = TEMP_P_ID;
        SET PT_IDS = TEMP_PT_ID;
	ELSE
		SET TEMP_P_IDS = P_IDS;
		SET P_IDS = CONCAT(TEMP_P_IDS, ", ", TEMP_P_ID);
        SET TEMP_PT_IDS = PT_IDS;
        SET PT_IDS = CONCAT(TEMP_PT_IDS, ", ", TEMP_PT_ID);
    END IF;
    
    SET TEMP_COUNT = TEMP_COUNT + 1;
END WHILE;

SET @PT_IDS_LIST = PT_IDS;
SET @P_IDS_LIST = P_IDS;
SELECT PT_IDS, P_IDS, @PT_IDS_LIST, @P_IDS_LIST;

IF F_NAME IS NOT NULL THEN
	-- UPDATE PERSON
    -- SET FIRST_NAME = F_NAME
    -- WHERE PERSON_ID = P_ID;
    -- WHERE PERSON_ID IN (P_IDS);
    
    SET @FIRST = F_NAME;
    
    SET @QRY_FIRST = CONCAT("UPDATE PERSON SET FIRST_NAME = '", @FIRST, "' WHERE PERSON_ID IN (", @P_IDS_LIST, ")");

	PREPARE STMT_FIRST FROM @QRY_FIRST;
	EXECUTE STMT_FIRST;
	deallocate prepare STMT_FIRST;
    
END IF;

IF L_NAME IS NOT NULL THEN
	-- UPDATE PERSON
    -- SET LAST_NAME = L_NAME
    -- WHERE PERSON_ID = P_ID;
    -- WHERE PERSON_ID IN (P_IDS);
    
    SET @LAST = L_NAME;
    
    SET @QRY_LAST = CONCAT("UPDATE PERSON SET LAST_NAME = '", @LAST, "' WHERE PERSON_ID IN (", @P_IDS_LIST, ")");

	PREPARE STMT_LAST FROM @QRY_LAST;
	EXECUTE STMT_LAST;
	deallocate prepare STMT_LAST;
    
END IF;

IF PHONE IS NOT NULL THEN
	-- UPDATE PATIENT
    -- SET PATIENT_PHONE = PHONE
    -- WHERE PATIENT_ID = PT_ID;
    -- WHERE PATIENT_ID IN (PT_IDS);
    
    SET @PHONES = PHONE;
    
    SET @QRY_PHONE = CONCAT("UPDATE PATIENT SET PATIENT_PHONE = '", @PHONES, "' WHERE PATIENT_ID IN (", @PT_IDS_LIST, ")");

	PREPARE STMT_PHONE FROM @QRY_PHONE;
	EXECUTE STMT_PHONE;
	deallocate prepare STMT_PHONE;
    
END IF;

IF EMAIL IS NOT NULL THEN
	-- UPDATE PATIENT
    -- SET PATIENT_EMAIL = EMAIL
    -- WHERE PATIENT_ID = PT_ID;
    -- WHERE PATIENT_ID IN (PT_IDS);
    
    SET @EMAILS = EMAIL;
    
    SET @QRY_EMAIL = CONCAT("UPDATE PATIENT SET PATIENT_EMAIL = '", @EMAILS, "' WHERE PATIENT_ID IN (", @PT_IDS_LIST, ")");

	PREPARE STMT_EMAIL FROM @QRY_EMAIL;
	EXECUTE STMT_EMAIL;
	deallocate prepare STMT_EMAIL;
    
END IF;

IF NOTES IS NOT NULL THEN
	-- UPDATE PATIENT
    -- SET PATIENT_NOTES = NOTES
    -- WHERE PATIENT_ID = PT_ID;
    -- WHERE PATIENT_ID IN (@PT_IDS_LIST);
    
    SET @NOTE = NOTES;
    
    SET @QRY_NOTE = CONCAT("UPDATE PATIENT SET PATIENT_NOTES = '", @NOTE, "' WHERE PATIENT_ID IN (", @PT_IDS_LIST, ")");

	PREPARE STMT_NOTE FROM @QRY_NOTE;
	EXECUTE STMT_NOTE;
	deallocate prepare STMT_NOTE;
END IF;

-- SELECT P_IDS, PT_IDS;
-- SELECT PATIENT_NOTES FROM PATIENT WHERE PATIENT_ID IN (PT_IDS);

END


CREATE DEFINER=`root`@`localhost` PROCEDURE `ADD_THERAPIST_AVAILABILITY`(IN T_ID INT, IN S_DAY DATE, IN START_TIME TIME, IN END_TIME TIME)
BEGIN

DECLARE S_ID INT;

SELECT SCHEDULE_ID INTO S_ID 
FROM SCHEDULE 
WHERE THERAPIST_ID = T_ID 
	AND SCHEDULE_DAY = S_DAY 
    -- AND SCHED_START_TIME = START_TIME AND SCHED_END_TIME = END_TIME
    -- OR SCHED_START_TIME > START_TIME AND SCHED_END_TIME < END_TIME
    -- OR SCHED_START_TIME > START_TIME AND SCHED_END_TIME < END_TIME
    ;
    
-- SELECT S_ID;

IF S_ID IS NULL THEN
	INSERT INTO SCHEDULE VALUES
    (
		DEFAULT, T_ID, S_DAY, START_TIME, END_TIME
	);
-- ELSE
	-- SELECT S_ID;
END IF;

END


CREATE DEFINER=`root`@`localhost` PROCEDURE `CANCEL_AVAILABILITY`(IN T_ID INT, IN T_DATE DATE)
BEGIN

	CALL UPDATE_CONFLICT_APPTS(T_ID, T_DATE, 1, @ID_LIST);

	DELETE FROM SCHEDULE WHERE THERAPIST_ID = T_ID AND SCHEDULE_DAY = T_DATE;

END


CREATE DEFINER=`root`@`localhost` PROCEDURE `MODIFY_SCHEDULE`(IN T_ID INT, IN T_DATE DATE, IN T_TIME TIME, IN END_TIME TIME, IN NEW_DAY DATE, IN NEW_START_TIME TIME, IN NEW_END_TIME TIME)
BEGIN

DECLARE S_ID INT;

DECLARE CONFLICT_LIST VARCHAR(200);
DECLARE CONFLICT_LIST_COUNT INT;
DECLARE CONFLICT_DAY DATE;
DECLARE CONFLICT_START TIME;
DECLARE CONFLICT_END TIME;
DECLARE FOUND_ID VARCHAR(5) DEFAULT "FALSE";
DECLARE TEMP_COUNT INT;
DECLARE A_VAR VARCHAR(10);

IF NEW_DAY IS NOT NULL THEN
	SET CONFLICT_DAY = NEW_DAY;
ELSE
	SET CONFLICT_DAY = T_DATE;
END IF;
IF NEW_START_TIME IS NOT NULL THEN
	SET CONFLICT_START = NEW_START_TIME;
ELSE
	SET CONFLICT_START = T_TIME;
END IF;
IF NEW_END_TIME IS NOT NULL THEN
	SET CONFLICT_END = NEW_END_TIME;
ELSE
	SET CONFLICT_END = END_TIME;
END IF;

			SELECT RETURN_CONFLICTING_APPTS(T_ID, CONFLICT_DAY, CONFLICT_START, CONFLICT_END) INTO CONFLICT_LIST;
            
            IF CONFLICT_LIST != "NO IDS FOUND" THEN

			SELECT (LENGTH(CONFLICT_LIST) - LENGTH(REPLACE(CONFLICT_LIST, ',', ''))) + 1 INTO CONFLICT_LIST_COUNT;

			SET TEMP_COUNT = 1;
			WHILE (TEMP_COUNT <= CONFLICT_LIST_COUNT) AND FOUND_ID = "FALSE" DO
				SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(CONFLICT_LIST, ',', TEMP_COUNT), ',', -1) INTO A_VAR;
				IF A_VAR NOT LIKE "%NULL%" THEN
					SET FOUND_ID = "TRUE";
				END IF;
				SET TEMP_COUNT = TEMP_COUNT + 1;
			END WHILE;
            
            END IF;
            
            IF FOUND_ID = "FALSE" THEN

-- add line to check if mod conflict appts returns null

-- CALL UPDATE_MOD_CONFLICT_APPTS(T_ID, T_DATE, NEW_START_TIME, NEW_END_TIME, NEW_DAY);

-- SELECT SCHEDULE_ID INTO S_ID
-- FROM SCHEDULE
-- WHERE THERAPIST_ID = T_ID
	-- AND SCHEDULE_DAY = T_DATE;
    
SELECT APPT_ID INTO S_ID
FROM PATIENT_APPOINTMENT
WHERE THERAPIST_ID = T_ID
	AND PATIENT_ID = 0
    AND APPT_DAY = T_DATE
    AND APPT_START_TIME = T_TIME
    AND APPT_END_TIME = END_TIME;
    
IF S_ID IS NOT NULL THEN

IF NEW_START_TIME = "00:00:00" AND NEW_END_TIME = "00:00:00" THEN

	DELETE FROM PATIENT_APPOINTMENT WHERE APPT_ID = S_ID;

ELSE

IF NEW_DAY IS NOT NULL THEN
	UPDATE PATIENT_APPOINTMENT
    SET APPT_DATE = NEW_DAY
    WHERE APPT_ID = S_ID;
END IF;

IF NEW_START_TIME IS NOT NULL THEN
	UPDATE PATIENT_APPOINTMENT
    SET APPT_START_TIME = NEW_START_TIME
    WHERE APPT_ID = S_ID;
END IF;

IF NEW_END_TIME IS NOT NULL THEN
	UPDATE PATIENT_APPOINTMENT
    SET APPT_END_TIME = NEW_END_TIME
    WHERE APPT_ID = S_ID;
END IF;

END IF;

ELSE

	-- T_DATE DATE, IN NEW_DAY DATE, IN NEW_START_TIME TIME, IN NEW_END_TIME TIME
    INSERT INTO PATIENT_APPOINTMENT VALUES
    (
		DEFAULT,
        0,
        T_ID,
        IF(NEW_DAY IS NOT NULL, NEW_DAY, T_DATE),
        NEW_START_TIME,
        NEW_END_TIME,
        "Exercise Therapy",
        "THERAPIST NOT AVAILABLE"
    )
    ;

END IF;

END IF;

END


CREATE DEFINER=`root`@`localhost` PROCEDURE `UPDATE_DEFAULT_SCHED`(IN T_ID INT, IN WEEKDAY VARCHAR(10), S_TIME TIME, E_TIME TIME)
BEGIN

	SET @S_TIME = S_TIME;
    SET @E_TIME = E_TIME;

	SET @D_NAME = LEFT(WEEKDAY, 3);
    
    SET @COL_S_NAME = CONCAT(UPPER(@D_NAME), "_START_TIME");
    SET @COL_E_NAME = CONCAT(UPPER(@D_NAME), "_END_TIME");
    
    SET @QRY = CONCAT("SELECT ", @COL_S_NAME, ", ", @COL_E_NAME, " INTO @START_TIME, @END_TIME FROM DEFAULT_SCHEDULE WHERE THERAPIST_ID = ", T_ID);

	PREPARE STMT FROM @QRY;
	EXECUTE STMT;
	deallocate prepare STMT;
    
    -- SELECT @START_TIME, @END_TIME;

IF @S_TIME IS NOT NULL THEN

	IF @S_TIME = "00:00:00" THEN
		SET @S_TIME = NULL;
	END IF;

	SET @QRY2 = CONCAT("UPDATE DEFAULT_SCHEDULE SET ", @COL_S_NAME, " = @S_TIME WHERE THERAPIST_ID = ", T_ID);

	PREPARE STMT2 FROM @QRY2;
	EXECUTE STMT2;
	deallocate prepare STMT2;
    
END IF;  

IF @E_TIME IS NOT NULL THEN

	IF @E_TIME = "00:00:00" THEN
		SET @E_TIME = NULL;
	END IF;

	SET @QRY3 = CONCAT("UPDATE DEFAULT_SCHEDULE SET ", @COL_E_NAME, " = @E_TIME WHERE THERAPIST_ID = ", T_ID);

	PREPARE STMT3 FROM @QRY3;
	EXECUTE STMT3;
	deallocate prepare STMT3;
    
END IF;    

END


CREATE DEFINER=`root`@`localhost` PROCEDURE `UPDATE_THERAPIST_APPTS`(IN T_ID INT)
BEGIN

DECLARE APPT_ID_LIST VARCHAR(16000);

SELECT RETURN_APPT_IDS(T_ID, CURDATE(), "9999-12-31") INTO APPT_ID_LIST;

IF APPT_ID_LIST != "NO IDS FOUND" THEN

UPDATE THERAPIST_APPOINTMENTS
SET APPT_LIST = APPT_ID_LIST
WHERE THERAPIST_ID = T_ID;

else

UPDATE THERAPIST_APPOINTMENTS
SET APPT_LIST = NULL
WHERE THERAPIST_ID = T_ID;

END IF;

END


CREATE DEFINER=`root`@`localhost` PROCEDURE `DELETE_PERSON`(IN P_ID INT)
BEGIN

	DELETE FROM PERSON WHERE PERSON_ID = P_ID;

END


CREATE DEFINER=`root`@`localhost` PROCEDURE `EDIT_PERSON`(IN P_ID INT, IN F_NAME VARCHAR(30), IN L_NAME VARCHAR(30), IN U_NAME VARCHAR(30), IN PASS VARCHAR(30), IN EMAIL VARCHAR(100), IN PHONE VARCHAR(20))
BEGIN

DECLARE P_TYPE VARCHAR(30);

SELECT PERSON_TYPE INTO P_TYPE
FROM PERSON
WHERE PERSON_ID = P_ID;

IF P_TYPE IS NOT NULL THEN
	
	IF F_NAME IS NOT NULL THEN
		UPDATE PERSON
        SET FIRST_NAME = F_NAME
        WHERE PERSON_ID = P_ID;
    END IF;
    
	IF L_NAME IS NOT NULL THEN
		UPDATE PERSON
        SET LAST_NAME = L_NAME
        WHERE PERSON_ID = P_ID;
    END IF;
    
	IF U_NAME IS NOT NULL THEN
		UPDATE LOGIN_INFORMATION
        SET USERNAME = U_NAME
        WHERE PERSON_ID = P_ID;
    END IF;
    
	IF PASS IS NOT NULL THEN
		UPDATE LOGIN_INFORMATION
        SET USER_PASSWORD = PASS
        WHERE PERSON_ID = P_ID;
    END IF;
    
	IF EMAIL IS NOT NULL THEN
		IF P_TYPE = "THERAPIST" THEN
			UPDATE THERAPIST
            SET THERAPIST_EMAIL = EMAIL
            WHERE PERSON_ID = P_ID;
		ELSEIF P_TYPE = "ADMINISTRATOR" THEN
			UPDATE ADMINISTRATOR
            SET ADMIN_EMAIL = EMAIL
            WHERE PERSON_ID = P_ID;
		else
			UPDATE SCHEDULER
            SET SCHEDULER_EMAIL = EMAIL
            WHERE PERSON_ID = P_ID;
        END IF;
    END IF;

	IF PHONE IS NOT NULL THEN
		IF P_TYPE = "THERAPIST" THEN
			UPDATE THERAPIST
            SET THERAPIST_PHONE = PHONE
            WHERE PERSON_ID = P_ID;
		ELSEIF P_TYPE = "ADMINISTRATOR" THEN
			UPDATE ADMINISTRATOR
            SET ADMIN_PHONE = PHONE
            WHERE PERSON_ID = P_ID;
		else
			UPDATE SCHEDULER
            SET SCHEDULER_PHONE = PHONE
            WHERE PERSON_ID = P_ID;
        END IF;
    END IF;
    
END IF;

END


CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_THERAPIST_CERTS`(IN T_ID INT, OUT CERT_STRING VARCHAR(3000))
BEGIN

DECLARE CERT_COUNT INT;
DECLARE TEMP_COUNT INT DEFAULT 2;
DECLARE T_TEST INT;
-- DECLARE CERT_STRING VARCHAR(3000);

SELECT PERSON_ID INTO T_TEST FROM THERAPIST WHERE THERAPIST_ID = T_ID;

IF T_TEST IS NULL THEN
	SET CERT_STRING = "NOT A VALID THERAPIST ID";
    
ELSE

SET @T_ID = T_ID;

SELECT COUNT(*) + 1 INTO CERT_COUNT FROM CERTIFICATIONS;

IF CERT_COUNT > 1 THEN

WHILE TEMP_COUNT <= CERT_COUNT DO

	WITH MY_CTE AS 
	(
		SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = "FITNESS_DB_TEST" AND TABLE_NAME = "THERAPIST_CERTIFICATIONS" AND ORDINAL_POSITION = TEMP_COUNT
	)
    SELECT COLUMN_NAME INTO @COL_NAME
    FROM MY_CTE;
    
    SET @QRY = CONCAT("SELECT ", @COL_NAME, " INTO @COL_VAL FROM THERAPIST_CERTIFICATIONS WHERE THERAPIST_ID = ", @T_ID);

	PREPARE STMT FROM @QRY;
	EXECUTE STMT;
	deallocate prepare STMT;
    
    IF @COL_VAL = 'Y' THEN
		IF CERT_STRING IS NULL THEN
			SET CERT_STRING = @COL_NAME;
		ELSE
			SET CERT_STRING = CONCAT(CERT_STRING, ", ", @COL_NAME);
		END IF;
    END IF;
    
    SET TEMP_COUNT = TEMP_COUNT + 1;
    
END WHILE;

END IF;

IF CERT_STRING IS NULL THEN
	SET CERT_STRING = "NO CERTS FOUND";
END IF;

END IF;

END


CREATE DEFINER=`root`@`localhost` PROCEDURE `MANAGE_SYSTEM_CERTS`(IN C_NAME VARCHAR(15), IN C_DEF VARCHAR(100), IN C_TYPE VARCHAR(30), IN UPDATE_FLAG VARCHAR(1))
BEGIN

SET @C_NAME = C_NAME;

IF UPDATE_FLAG = 'A' THEN

INSERT INTO CERTIFICATIONS VALUES (C_TYPE, C_NAME, C_DEF);

SET @QRY = CONCAT("ALTER TABLE THERAPIST_CERTIFICATIONS ADD ", @C_NAME, " VARCHAR(15)");

	PREPARE STMT FROM @QRY;
	EXECUTE STMT;
	deallocate prepare STMT;
    
SET @QRY2 = CONCAT("UPDATE THERAPIST_CERTIFICATIONS SET ", @C_NAME, " = 'N' WHERE THERAPIST_ID IS NOT NULL");

	PREPARE STMT2 FROM @QRY2;
	EXECUTE STMT2;
	deallocate prepare STMT2;
    
elseIF UPDATE_FLAG = 'D' THEN

SET @QRY3 = CONCAT("ALTER TABLE THERAPIST_CERTIFICATIONS DROP COLUMN ", @C_NAME);

	PREPARE STMT3 FROM @QRY3;
	EXECUTE STMT3;
	deallocate prepare STMT3;
    
SET @QRY4 = CONCAT("DELETE FROM CERTIFICATIONS WHERE CERT_NAME = '", @C_NAME, "'");

	PREPARE STMT4 FROM @QRY4;
	EXECUTE STMT4;
	deallocate prepare STMT4;

END IF;
    
END


CREATE DEFINER=`root`@`localhost` PROCEDURE `MANAGE_THERAPIST_CERTS`(IN T_ID INT, IN C_NAME VARCHAR(15), IN DEFAULT_FLAG VARCHAR(1))
BEGIN

SET @T_ID = T_ID;
SET @C_NAME = C_NAME;

IF DEFAULT_FLAG = 'A' THEN
		
SET @QRY = CONCAT("UPDATE THERAPIST_CERTIFICATIONS SET ", @C_NAME, " = 'Y' WHERE THERAPIST_ID = ", @T_ID);

	PREPARE STMT FROM @QRY;
	EXECUTE STMT;
	deallocate prepare STMT;
        
ELSEIF DEFAULT_FLAG = 'D' THEN

SET @QRY2 = CONCAT("UPDATE THERAPIST_CERTIFICATIONS SET ", @C_NAME, " = 'N' WHERE THERAPIST_ID = ", @T_ID);

	PREPARE STMT2 FROM @QRY2;
	EXECUTE STMT2;
	deallocate prepare STMT2;

END IF;

END


CREATE DEFINER=`root`@`localhost` PROCEDURE `ADD_THERAPIST_REVIEW`(IN T_ID INT, IN REVIEW INT)
BEGIN

	DECLARE CURR_RATING DECIMAL(4,3);
    DECLARE REVIEW_COUNT INT;
    
    DECLARE TEMP_RATING DECIMAL(4,3);
    
    -- SELECT THERAPIST_RATING, THERAPIST_REVIEWS INTO CURR_RATING, REVIEW_COUNT
    SELECT THERAPIST_REVIEWS INTO REVIEW_COUNT
    FROM THERAPIST_RATINGS
    WHERE THERAPIST_ID = T_ID;
    
    IF REVIEW_COUNT IS NULL THEN
		-- SET CURR_RATING = REVIEW;
        SET REVIEW_COUNT = 1;
	else
		SET REVIEW_COUNT = REVIEW_COUNT + 1;
		-- SET TEMP_RATING = CURR_RATING + REVIEW;
        
        -- SET CURR_RATING = ROUND(TEMP_RATING / REVIEW_COUNT, 3);
	END IF;
    
    UPDATE THERAPIST_RATINGS SET THERAPIST_RATING = REVIEW, THERAPIST_REVIEWS = REVIEW_COUNT WHERE THERAPIST_ID = T_ID;

END


CREATE DEFINER=`root`@`localhost` PROCEDURE `ADD_CERT`(IN C_NAME VARCHAR(15), IN C_DEF VARCHAR(100), IN C_TYPE VARCHAR(30))
BEGIN

INSERT INTO CERTIFICATIONS VALUES (C_TYPE, C_NAME, C_DEF);

SET @C_NAME = C_NAME;

SET @QRY = CONCAT("ALTER TABLE THERAPIST_CERTIFICATIONS ADD ", @C_NAME, " VARCHAR(15)");

	PREPARE STMT FROM @QRY;
	EXECUTE STMT;
	deallocate prepare STMT;
    
SET @QRY2 = CONCAT("UPDATE THERAPIST_CERTIFICATIONS SET ", @C_NAME, " = 'N' WHERE THERAPIST_ID IS NOT NULL");

	PREPARE STMT2 FROM @QRY2;
	EXECUTE STMT2;
	deallocate prepare STMT2;
    
END


CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_THERAPIST_INFO`(IN CERT VARCHAR(30), IN T_DATE DATE, IN T_TIME TIME, OUT COUNT INT, OUT IDS VARCHAR(1000))
BEGIN

DECLARE TEMP_ID VARCHAR(1000);
DECLARE TEMP INT;
DECLARE ID VARCHAR(1000) DEFAULT " ";
DECLARE TEMP_COUNT INT DEFAULT 1;

SET @CO := 0;
SET @CERTIF = CERT;

SET @QRY = CONCAT("SELECT COUNT(*) INTO @CO FROM (SELECT THERAPIST_ID FROM THERAPIST_CERTIFICATIONS WHERE ", @CERTIF, " = 'Y') t1");

PREPARE STMT FROM @QRY;
EXECUTE STMT;
deallocate prepare STMT;

SET COUNT = @CO;

-- --------------------------------------------------------------------------------------------------------------------------

DROP TABLE IF EXISTS X_TEMP_TABLE;
CREATE TEMPORARY TABLE X_TEMP_TABLE (T_ID INT);

SET @DATE = CONCAT("'", T_DATE, "'");
SET @TIME1 = CONCAT('"', T_TIME, '"');
SET @TIME2 = CONCAT('"', addtime(T_TIME, "01:00:00"), '"');

SET @D_NAME = DATE_FORMAT(T_DATE, '%a');    
SET @COL_S_NAME = CONCAT(UPPER(@D_NAME), "_START_TIME");
SET @COL_E_NAME = CONCAT(UPPER(@D_NAME), "_END_TIME");

-- SELECT @TIME1, @TIME2;

-- DELETE FROM X_TEMP_TABLE;
    -- " AND SCHED_END_TIME >= ", addtime(@TIME, '01:00:00'),
    -- " AND SCHED_START_TIME <= ", @TIME, 

SET @QRY2 = CONCAT(
"INSERT INTO X_TEMP_TABLE 
SELECT DISTINCT(TC.THERAPIST_ID) 
FROM THERAPIST_CERTIFICATIONS TC, DEFAULT_SCHEDULE DS
WHERE ", @CERTIF, " = 'Y'
	AND ", @COL_S_NAME, " <= ", @TIME1, 
    " AND ", @COL_E_NAME, " >= ", @TIME2,
    " AND TC.THERAPIST_ID NOT IN 
    (
		SELECT THERAPIST_ID 
        FROM PATIENT_APPOINTMENT 
        WHERE APPT_START_TIME = ", @TIME1, " AND APPT_END_TIME = ", @TIME2, " AND APPT_DAY = ", @DATE,
			" OR APPT_START_TIME < ", @TIME1, " AND APPT_END_TIME > ", @TIME1, " AND APPT_DAY = ", @DATE,
            " OR APPT_START_TIME < ", @TIME2, " AND APPT_END_TIME > ", @TIME2, " AND APPT_DAY = ", @DATE,
	") 
	AND TC.THERAPIST_ID NOT IN
    (
		SELECT THERAPIST_ID FROM SCHEDULE WHERE SCHED_START_TIME = '00:00:00' AND SCHED_END_TIME = '00:00:00' AND SCHEDULE_DAY = ", @DATE,
    ")
    AND TC.THERAPIST_ID = DS.THERAPIST_ID"
);

PREPARE STMT2 FROM @QRY2;
EXECUTE STMT2;
deallocate prepare STMT2;

DROP TABLE IF EXISTS TEMP_TABLE;
CREATE TABLE TEMP_TABLE (T_ID INT, P_ID INT);

-- DELETE FROM TEMP_TABLE;

SET @QRY3 = CONCAT("INSERT INTO TEMP_TABLE SELECT THERAPIST_ID, PERSON_ID FROM THERAPIST, X_TEMP_TABLE WHERE THERAPIST_ID = T_ID");

PREPARE STMT3 FROM @QRY3;
EXECUTE STMT3;
deallocate prepare STMT3;

-- SELECT * FROM TEMP_TABLE;

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

WHILE TEMP_COUNT <= @CO DO
	WITH MY_CTE AS 
	(
        SELECT T_ID, row_number() OVER ( order by T_ID ) as ROWNUM
		FROM X_TEMP_TABLE
	)
	SELECT  T_ID INTO TEMP
	FROM    MY_CTE
	WHERE   ROWNUM = TEMP_COUNT;
        
    IF (TEMP_COUNT = 1) THEN
		SET ID = TEMP;
	ELSE
		SET TEMP_ID = ID;
		SET ID = CONCAT(TEMP_ID, ",", TEMP);
    END IF;
        
    SET TEMP_COUNT = TEMP_COUNT + 1;
END WHILE;

SET IDS = ID;

END


CREATE DEFINER=`root`@`localhost` PROCEDURE `UPDATE_CONFLICT_APPTS`(IN T_ID INT, IN T_DAY DATE, IN UPDATE_FLAG INT, OUT RETURN_LIST VARCHAR(200))
BEGIN

DECLARE START_TIME TIME;
DECLARE END_TIME TIME;
-- DECLARE DAY DATE;
-- DECLARE T_ID INT;

DECLARE TEMP_COUNT INT DEFAULT 1;
DECLARE ID_COUNT INT;

DECLARE A_ID INT;

DECLARE TEMP_ID_LIST VARCHAR(100);
DECLARE ID_LIST VARCHAR(100);

SELECT SCHED_START_TIME, SCHED_END_TIME 
INTO START_TIME, END_TIME
FROM SCHEDULE 
WHERE THERAPIST_ID = T_ID
	AND SCHEDULE_DAY = T_DAY;
    
IF START_TIME IS NULL THEN
	-- SET @D_NAME = DAYNAME(T_DAY);
    SET @D_NAME = DATE_FORMAT(T_DAY, '%a');
    -- SELECT @D_NAME;
    
    SET @COL_S_NAME = CONCAT(UPPER(@D_NAME), "_START_TIME");
    SET @COL_E_NAME = CONCAT(UPPER(@D_NAME), "_END_TIME");
    -- SELECT @COL_S_NAME, @COL_E_NAME;
    
    SET @QRY = CONCAT("SELECT ", @COL_S_NAME, ", ", @COL_E_NAME, " INTO @START_TIME, @END_TIME FROM DEFAULT_SCHEDULE WHERE THERAPIST_ID = ", T_ID);

	PREPARE STMT FROM @QRY;
	EXECUTE STMT;
	deallocate prepare STMT;
    
    -- SELECT @START_TIME, @END_TIME;
    
    SET START_TIME = @START_TIME;
    SET END_TIME = @END_TIME;
    
    -- SELECT START_TIME, END_TIME;
    
END IF;

SELECT COUNT(*) INTO ID_COUNT 
FROM PATIENT_APPOINTMENT 
WHERE APPT_DAY = T_DAY
	AND START_TIME <= APPT_START_TIME
    AND END_TIME >= APPT_END_TIME
    AND THERAPIST_ID = T_ID;
    
IF ID_COUNT != 0 THEN

			WHILE TEMP_COUNT <= ID_COUNT DO
				WITH MY_CTE AS 
				(
					SELECT APPT_ID,
						row_number() OVER ( order by APPT_ID ) as ROWNUM
					FROM PATIENT_APPOINTMENT
                    WHERE APPT_DAY = T_DAY
						AND START_TIME <= APPT_START_TIME
						AND END_TIME >= APPT_END_TIME
						AND THERAPIST_ID = T_ID
				)
				SELECT  APPT_ID
					INTO A_ID
				FROM    MY_CTE
				WHERE   ROWNUM = TEMP_COUNT;
				
				SET TEMP_COUNT = TEMP_COUNT + 1;
				
				IF ID_LIST IS NULL THEN
					SET ID_LIST = A_ID;
				else
					SET TEMP_ID_LIST = ID_LIST;
					SET ID_LIST = CONCAT(TEMP_ID_LIST, ", ", A_ID);
				END IF;
                
			END WHILE;

ELSE
	SET ID_LIST = "NO IDS FOUND";
END IF;

-- SELECT ID_LIST;

IF ID_LIST != "NO IDS FOUND" AND UPDATE_FLAG = 1 THEN

	SET @ID_LIST = ID_LIST;
    SET @T_ID = T_ID;

	-- SET @QRY2 = CONCAT("SELECT * FROM PATIENT_APPOINTMENT WHERE APPT_ID IN ( ", @ID_LIST, " )");
    -- SET @QRY2 = CONCAT("UPDATE PATIENT_APPOINTMENT SET THERAPIST_ID = 0, APPT_NOTES = CONCAT(APPT_NOTES, '; ", @T_ID, "') WHERE APPT_ID IN ( ", @ID_LIST, " )");
    SET @QRY2 = CONCAT("UPDATE PATIENT_APPOINTMENT SET THERAPIST_ID = 0 WHERE APPT_ID IN ( ", @ID_LIST, " )");

	PREPARE STMT2 FROM @QRY2;
	EXECUTE STMT2;
	deallocate prepare STMT2;

END IF;

IF ID_LIST != "NO IDS FOUND" AND UPDATE_FLAG = 0 THEN
	SET RETURN_LIST = ID_LIST;
END IF;

END


CREATE DEFINER=`root`@`localhost` PROCEDURE `UPDATE_MOD_CONFLICT_APPTS`(IN T_ID INT, IN T_DAY DATE, NEW_START_TIME TIME, NEW_END_TIME TIME, NEW_DAY DATE)
BEGIN

DECLARE START_TIME TIME;
DECLARE END_TIME TIME;
-- DECLARE DAY DATE;
-- DECLARE T_ID INT;

DECLARE TEMP_COUNT INT DEFAULT 1;
DECLARE ID_COUNT INT;

DECLARE A_ID INT;

DECLARE TEMP_ID_LIST VARCHAR(200);
DECLARE ID_LIST VARCHAR(200);

DECLARE TEMP_FOUND_ID VARCHAR(10);
DECLARE MISSING_IDS VARCHAR(150);
DECLARE ORIGINAL_IDS_COUNT INT;
DECLARE TEMP_OG_IDS_COUNT INT DEFAULT 1;

CALL UPDATE_CONFLICT_APPTS(T_ID, T_DAY, 0, @INCLUDED_APPTS);

-- SELECT @INCLUDED_APPTS;

SELECT SCHED_START_TIME, SCHED_END_TIME 
INTO START_TIME, END_TIME
FROM SCHEDULE 
WHERE THERAPIST_ID = T_ID
	AND SCHEDULE_DAY = T_DAY;
    
IF START_TIME IS NULL THEN
	-- SET @D_NAME = DAYNAME(T_DAY);
    SET @D_NAME = DATE_FORMAT(T_DAY, '%a');
    -- SELECT @D_NAME;
    
    SET @COL_S_NAME = CONCAT(UPPER(@D_NAME), "_START_TIME");
    SET @COL_E_NAME = CONCAT(UPPER(@D_NAME), "_END_TIME");
    -- SELECT @COL_S_NAME, @COL_E_NAME;
    
    SET @QRY = CONCAT("SELECT ", @COL_S_NAME, ", ", @COL_E_NAME, " INTO @START_TIME, @END_TIME FROM DEFAULT_SCHEDULE WHERE THERAPIST_ID = ", T_ID);
    
    -- SELECT @COL_S_NAME, @COL_E_NAME;

	PREPARE STMT FROM @QRY;
	EXECUTE STMT;
	deallocate prepare STMT;
    
    -- SELECT @START_TIME, @END_TIME;
    
    SET START_TIME = @START_TIME;
    SET END_TIME = @END_TIME;
    
    -- SELECT START_TIME, END_TIME;
    
END IF;

IF NEW_START_TIME IS NOT NULL THEN
	SET START_TIME = NEW_START_TIME;
-- else
	-- SELECT SCHED_START_TIME INTO START_TIME FROM SCHEDULE WHERE SCHEDULE_ID = S_ID;
END IF;
IF NEW_END_TIME IS NOT NULL THEN
	SET END_TIME = NEW_END_TIME;
-- else
	-- SELECT SCHED_END_TIME INTO END_TIME FROM SCHEDULE WHERE SCHEDULE_ID = S_ID;
END IF;
IF NEW_DAY IS NOT NULL THEN
	SET T_DAY = NEW_DAY;
-- else
	-- SELECT SCHEDULE_DAY INTO DAY FROM SCHEDULE WHERE SCHEDULE_ID = S_ID;
END IF;

-- SELECT START_TIME, END_TIME, T_DAY;

SELECT COUNT(*) INTO ID_COUNT 
FROM PATIENT_APPOINTMENT 
WHERE APPT_DAY = T_DAY
	AND START_TIME <= APPT_START_TIME
    AND END_TIME >= APPT_END_TIME
    AND THERAPIST_ID = T_ID;
    
IF ID_COUNT != 0 THEN

			WHILE TEMP_COUNT <= ID_COUNT DO
				WITH MY_CTE AS 
				(
					SELECT APPT_ID,
						row_number() OVER ( order by APPT_ID ) as ROWNUM
					FROM PATIENT_APPOINTMENT
                    WHERE APPT_DAY = T_DAY
						AND START_TIME <= APPT_START_TIME
						AND END_TIME >= APPT_END_TIME
						AND THERAPIST_ID = T_ID
				)
				SELECT  APPT_ID
					INTO A_ID
				FROM    MY_CTE
				WHERE   ROWNUM = TEMP_COUNT;
                
                SELECT REPLACE(@INCLUDED_APPTS, A_ID, "NULL") INTO @INCLUDED_APPTS;
				
				SET TEMP_COUNT = TEMP_COUNT + 1;
				
				IF ID_LIST IS NULL THEN
					SET ID_LIST = A_ID;
				else
					SET TEMP_ID_LIST = ID_LIST;
					SET ID_LIST = CONCAT(TEMP_ID_LIST, ", ", A_ID);
				END IF;
                
			END WHILE;

ELSE
	SET ID_LIST = "NO IDS FOUND";
END IF;

IF @INCLUDED_APPTS IS NOT NULL THEN

SET @ID_LIST = @INCLUDED_APPTS;
SET @T_ID = T_ID;

-- SELECT @ID_LIST, @T_ID;

	-- SET @QRY2 = CONCAT("SELECT * FROM PATIENT_APPOINTMENT WHERE APPT_ID IN ( ", @ID_LIST, " )");
    -- SET @QRY2 = CONCAT("UPDATE PATIENT_APPOINTMENT SET THERAPIST_ID = 0, APPT_NOTES = CONCAT(APPT_NOTES, '; ", @T_ID, "') WHERE APPT_ID IN ( ", @ID_LIST, " )");
    
    SET @QRY2 = CONCAT("UPDATE PATIENT_APPOINTMENT SET THERAPIST_ID = 0 WHERE APPT_ID IN ( ", @ID_LIST, " )");

	PREPARE STMT2 FROM @QRY2;
	EXECUTE STMT2;
	deallocate prepare STMT2;
    
    END IF;
    
    -- IF ID IS IN ID_LIST IS SHOULD BE "NULL" IN @INCLUDED_APPTS AND @INCLUDED_APPTS SHOULD EQUAL @ID_LIST
	-- SELECT ID_LIST, @INCLUDED_APPTS, @ID_LIST;

END