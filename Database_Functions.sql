-- --------------------------------------------
-- CALLING FUNCTIONS
-- --------------------------------------------

-- ~~~~~~~~~~~~~~~~~~~~~
-- !!!! TLDR !!!!

SELECT FOUND_TYPE(FOUND_PERSON("SCHEDULER", "123"));
-- RETURNS "SCHEDULER, Full Name"

SELECT FOUND_TYPE(FOUND_PERSON("FAKE", "USER"));
-- RETURNS NULL

-- RETRIEVE AVAILABLE THERAPIST INFO (THERAPIST ID, FIRST NAME, LAST NAME) SEPARATED BY COMMA
-- !!! NOTE: MUST CALL GET_THERAPISTS_PROC PROCEDURE FIRST WITH APPOINTMENT PARAMETERS !!!
SELECT GET_THERAPISTS();
-- EXAMPLE: RETURNS "6 Aeisha Riggs,11 Cole Roberts,23 Sarah Olson" FOR EXAMPLE PARAMETERS IN DATABASE_PROCEDURES DOC

-- RETRIEVE PATIENT INFO AS STRING SEPARATED BY COMMAS // CAN CALL WITH PATIENT ID OR NULL
-- !!! NOTE: IF PARAMETER IS NULL IT USES MOST RECENT ENTRY IN APPOINTMENTS TABLE !!!
-- !!! NOTE: IF USING MOST RECENT APPOINTMENT... MUST CREATE ENTRY IN APPOINTMENTS TABLE FIRST WITH CREATE_APPOINTMENT PROCEDURE !!!
SELECT GET_PATIENT_INFO(NULL);
SELECT GET_PATIENT_INFO(25);
-- EXAMPLE: RETURNS "TESTING, PERSON, TEST@EMAIL, 888-867-5309, TESTING NOTES"

-- RETRIEVE PATIENT APPOINTMENT INFO AS STRING WITH EACH APPT FIELD SEPARATED BY COMMAS AND EACH SET OF APPT INFO SEPARATED BY A SEMICOLON
-- INFO RETURNED: IS PT FIRST NAME, PT LAST NAME, PT EMAIL, PT PHONE, THER. ID, THER. FULL NAME, APPT THERAPY TYPE, APPT ID, APPT DAY, APPT START, APPT END, APPT NOTES
-- ENTER PATIENT FIRST NAME, LAST NAME, EMAIL, PHONE, OR APPT ID
-- IF APPT ID ENTERED OTHER FIELDS ARE NOT CHECKED // IF INVALID APPT ID ENTERED IT RETURNS "NOT A VALID APPOINTMENT ID"
-- IF APPT NOT ENTERED THEN AT LEAST ONE OF THE OTHER FOUR FIELDS MUST NOT BE NULL
-- IF NO FIELDS ENETERED IT RETURNS "NO PATIENT INFORMATION PROVIDED" AND IF NO APPT INFO FOUND IT RETURNS "NO APPOINTMENT INFORMATION FOUND FOR PROVIDED PATIENT INFORMATION"
-- ALL FIELDS ARE CASE INSENSITIVE
SELECT RETURN_PATIENT_APPTS("alex", "Hutton", "alex@EMAIL.com", NULL, NULL);
-- EXAMPLE: SELECT RETURN_PATIENT_APPTS(NULL, NULL, NULL, NULL, 42);
	-- RETURNS: 'Alex, TEST, email@www.com, 888-888-8888, 11, Cole Roberts, Exercise Therapy, 42, 2024-11-06, 08:00:00, 09:00:00, this is a test appt'
-- EXAMPLE: SELECT RETURN_PATIENT_APPTS("KEN", NULL, NULL, "666-666-6666", NULL);
	-- RETURNS: 'Ken, Carson, freestyle2@opium.com, 666-666-6666, 19, Mario Barry, Exercise Therapy, 32, 2024-11-06, 09:00:00, 10:00:00, My shirt Balenciaga'
-- EXAMPLE: SELECT RETURN_PATIENT_APPTS("AlEx", NULL, NULL, NULL, null);
	-- RETURNS: 'Alex, TEST, email@www.com, 888-888-8888, 11, Cole Roberts, Exercise Therapy, 42, 2024-11-06, 08:00:00, 09:00:00, this is a test appt; Alex, Hutton, alex@email.com, 888-888-8888, 19, Mario Barry, Exercise Therapy, 60, 2024-11-06, 10:00:00, 11:00:00, ; Alex, Hutton, alex@email.com, 888-888-8888, 6, Aeisha Riggs, Exercise Therapy, 61, 2024-11-06, 10:00:00, 11:00:00, test; Alex, Hutton, alex@email.com, 555-555-5555, 6, Aeisha Riggs, Exercise Therapy, 63, 2024-12-05, 09:00:00, 10:00:00, notes'

-- RETRIEVE PATIENT ID AS INT FROM PARAMETERS
-- CALL WITH PATIENT FIRST NAME, LAST NAME, EMAIL, AND PHONE
-- EITHER EMAIL OR PHONE CAN BE NULL OR BOTH CAN BE ENTERED // ALL FIELDS ARE CASE INSENSITIVE
SELECT FIND_PATIENT("JOHN", "dOE", "JD@GMAIL.COM", NULL);
-- EXAMPLE: RETURNS 25

-- NO LONGER WORKS!!!
---------------------
-- RETRIEVE THERAPIST CERTIFICATIONS AS STRING // IF NO CERTS ARE FOUND... RETURNS "NO CERTS"
-- CALL WITH THERAPIST ID
-- SELECT GET_THERAPIST_CERTS(6);
-- EXAMPLE: RETURNS 'AET, CHT, CREX, CSCS, CYT, LMT, OCS, SCS, WCS'

-- RETRIEVE ALL SCHEDULE IDS WITHIN THE NEXT 30 DAYS AS STRING // IF NONE ARE FOUND... RETURNS "NO IDS FOUND"
-- CALL WITH THERAPIST ID
SELECT RETURN_SCHEDULE_IDS(6);
-- EXAMPLE: RETURNS "23, 46"

-- RETRIEVE UNAVAILABILITY (APPT) INFORMATION AS A STRING WITH EACH UNAVAILABILITY FIELD SEPARATED WITH COMMAS AND EACH SET OF UNAVAILABILITY INFO SEPARATED BY SEMICOLON
-- INFO RETURNED: APPT (UNAVAILABILITY) ID, THERAPIST ID, DAY, START TIME, END TIME
-- CALL WITH THERAPIST ID, START DAY, END DAY, OR APPT (UNAVAILABILITY) ID
-- IF APPT ID ENTERED OTHER FIELDS ARE NOT CHECKED // IF INVALID APPT ID IS PASSED IT RETURNS "NOT A VALID SCHEDULE ID"
-- IF NO FIELDS ARE ENTERED IT RETURNS "NO SCHEDULE PARAMETERS PROVIDED // IF NO AVAILABILITY IS FOUND IT RETURNS "NO AVAILABILITY FOUND"
SELECT RETURN_SCHEDULE_INFORMATION(6, "2024-11-01", "2024-11-30", NULL);
-- EXAMPLE: RETURNS '55, 8, 2024-11-07, 09:00:00, 14:00:00; 50, 8, 2024-11-13, 10:00:00, 15:00:00; 51, 8, 2024-11-14, 10:00:00, 15:00:00; 54, 8, 2024-11-15, 08:00:00, 11:00:00'
SELECT RETURN_SCHEDULE_INFORMATION(NULL, NULL, NULL, 40);
-- EXAMPLE: RETURNS '40, 24, 2024-11-06, 09:00:00, 17:00:00'

-- RETRIEVE ALL APPT IDS WITHIN THE NEXT 30 DAYS AS STRING // IF NONE ARE FOUND... RETURNS "NO IDS FOUND"
-- CALL WITH THERAPIST ID (OPTIONAL), START DATE, END DATE
-- TO GET IDS FOR ALL TIME CALL AS:
	-- SELECT RETURN_APPT_IDS(NULL, CURDATE(), "9999-12-31");
SELECT RETURN_APPT_IDS(NULL, "2024-10-01", "2024-12-01");
-- EXAMPLE: SELECT RETURN_APPT_IDS(NULL, "2024-10-01", "2024-12-01");
	-- RETURNS: '32, 33, 34, 40, 41, 42, 43, 44, 45, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 64'
-- EXAMPLE: SELECT RETURN_APPT_IDS(6, "2024-10-01", "2024-12-01");
	-- RETURNS: '51, 56, 57, 61'

-- RETRIEVE APPOINTMENT INFORMATION AS A STRING // IF NONE ARE FOUND... RETURNS "NOT A VALID APPOINTMENT ID"
-- CALL WITH APPOINTMENT ID (RETURNED BY RETURN_APPT_IDS FUNCTION ABOVE)
-- RETURNS PATIENT ID, THERAPIST ID, APPT DAY, APPT START TIME, APPT END TIME, THERAPY TYPE, APPT NOTES
SELECT RETURN_APPT_INFORMATION(33);
-- EXAMPLE: RETURNS '16, 11, 2024-11-06, 09:00:00, 10:00:00, Exercise Therapy, Test Selectors'

-- RETRIEVE APPOINTMENT IDS WITHIN TIME/DAY TO MAKE UNAVAILABLE AS STRING // IF NONE ARE FOUND... RETURNS "NO IDS FOUND"
-- CALL WITH THERAPIST_ID, DAY TO MAKE UNAVAILABLE, START TIME TO MAKE UNAVAILABLE, END TIME TO MAKE UNAVAILABLE
SELECT RETURN_CONFLICTING_APPTS(6, '2024-11-22', '10:00:00', '13:00:00');
-- EXAMPLE: RETURNS "110, 112"

-- RETRIEVE LOGGED IN USER INFO AS STRING
-- CALL WITH PERSON ID (RETURNED BY FOUND_PERSON FUNCTION)
-- RETURNS:
	-- SCHEDULER: FIRST NAME, LAST NAME, PERSON ID, SCHEDULER ID, EMAIL, PHONE
	-- ADMINISTRATOR: FIRST NAME, LAST NAME, PERSON ID, ADMINISTRATOR ID, EMAIL, PHONE
	-- THERAPIST: FIRST NAME, LAST NAME, PERSON ID, THERAPIST ID, EMAIL, PHONE, NOTIFICATION BOOLEAN ("TRUE"/"FALSE")
SELECT RETURN_USER_INFO(1);
-- SCHEDULER EX: 'Vicki, Burch, 1, 6, NULL, NULL'
-- ADMIN EX: 'Clark, Harman, 2, 5, NULL, NULL'
-- THERAPIST EX: 'Aeisha, Riggs, 6, 6, NULL, 9930, FALSE'

-- RETRIEVE CERTIFICATION INFO AS STRING WITH EACH CERT FIELD SEPARATED WITH COMMAS AND EACH SET OF CERT INFO SEPARATED BY SEMICOLON
-- CALL WITH CERT ABBREVIATION TO RETURN COMMA SEPARATED INFO ON ONE CERT // CALL WITH NULL TO RETURN INFO ON ALL CERTS
-- RETURNS CERT ABBREVIATION, CERT DESCRIPTION, THERAPY TYPE
SELECT GET_CERT_INFO("AET");
-- EXAMPLE: 'AET, Advanced Exercise Therapist, Exercise Therapy'
SELECT GET_CERT_INFO(NULL);
-- EXAMPLE: 'AET, Advanced Exercise Therapist, Exercise Therapy;...(other certs)...; WCS, Womenâ€™s Certified Specialist, Women's Therapy'

-- RETRIEVE PATIENT APPOINTMENTS THAT WILL NEED TO BE CANCELED TO MODIFY A SCHEDULE
-- CALL WITH SCHEDULE ID TO MODIFY, DESIRED START TIME, DESIRED END TIME, DESIRED DAY // ONLY SCHEDULE ID IS REQUIRED; OTHERS CAN BE NULL
-- NOTE: THIS COMPARES TO RETURN_CONFLICTING_APPTS RETURNED VALUE SO IF APPT IS INCLUDED IN (NEW) ENTERED TIMES/DAY HERE IT WILL SAY "NULL"
-- SELECT RETURN_MOD_CONFLICTING_APPTS(23, "15:00:00", "16:00:00", NULL);
-- EXAMPLE: '46, NULL, 57, 58'
-- NOTE: IN RETURN_CONFLICTING_APPTS(23) IT WOULD SAY '46, 56, 57, 58'

-- RETRIEVE USER INFO FROM PERSON TABLE
-- CALL WITH COLUMN TO SORT BY ("PERSON_ID", "FIRST_NAME", "LAST_NAME"), ORDER TO SORT IN ("ASC", "DESC"), AND PERSON TYPE TO RETURN ("THERAPIST", "SCHEDULER", "ADMINISTRATOR")
-- ALL PARAMETERS ARE OPTIONAL // DEFAULT PERSON TYPE IS ALL, DEFAULT SORT TYPE IS ASC, DEFAULT SORT COLUMN IS PERSON_ID
-- RETURNS PERSON ID, FIRST NAME, LAST NAME, PERSON TYPE, USER NAME, USER PASSWORD
SELECT RETURN_USER_TABLE(NULL, NULL, NULL);
-- EXAMPLE: '1, Vicki, Burch, SCHEDULER, VickiB, 123456; 2, Clark, Harman, ADMINISTRATOR, ClarkH, 123456; 3, Felipe, Trevino, ADMINISTRATOR, FelipeT, 123456; 4, Sandra, Fischer, ADMINISTRATOR, SandraF, 123456; 5, Abraham, Burton, THERAPIST, AbrahamB, 123456; {MORE RETURNED IN DB}'

-- RETRIEVE CONFLICTING APPT IDS FROM PATIENT APPOINTMENT TABLE
SELECT RETURN_CONFLICTING_APPT_IDS();
-- EXAMPLE: '51, 63'

-- RETRIEVE THERAPIST DEFAULT SCHEDULE FOR EACH BUSINESS DAY OF THE WEEK (MON-SAT)
-- CALL WITH THERAPIST_ID
SELECT RETURN_DEFAULT_SCHEDULE(6);
-- EXAMPLE RETURNS: 'MONDAY, 08:00:00, 12:00:00; TUESDAY, 09:00:00, 13:00:00; WEDNESDAY, 00:00:00, 00:00:00; THURSDAY, 12:00:00, 16:00:00; FRIDAY, 10:00:00, 17:00:00; SATURDAY, 00:00:00, 00:00:00'

-- RETURNS "TRUE"/"FALSE" IF THERE ARE (OR ARE NOT) CONFLICTING APPTS IN THE PATIENT_APPOINTMENTS TABLE (I.E. THERAPIST_ID = 0)
-- IF "TRUE" RETURN CONFLICTING APPT IDS FROM RETURN_CONFLICTING_APPT_IDS FUNCTION ABOVE
SELECT CONFLICT_APPT_NOTIF();
-- EXAMPLE RETURNS: "TRUE"

-- RETURNS "TRUE"/"FALSE" IF THERE ARE (OR ARE NOT) APPTS IN THE PATIENT_APPOINTMENTS TABLE THAT ARE NOT IN THE THERAPIST'S ROW IN THE THERAPIST_APPOINTMENTS TABLE
-- CALL WITH THERAPIST ID
SELECT THERAPIST_APPT_NOTIF(6);
-- EXAMPLE RETURNS: "FALSE"

-- RETURNS ALL THERAPISTS' RATINGS INFO WITH EACH RATINGS FIELD SEPARATED WITH COMMAS AND EACH SET OF RATINGS INFO SEPARATED BY SEMICOLON
-- RETURNS THERAPIST ID, CURRENT RATING, NUMBER OF REVIEWS
SELECT GET_THERAPIST_RATINGS();
-- EXAMPLE RETURNS: "5, 0, 0; 6, 5, 3; ...(ALL OTHER THERAPIST RATINGS INFO)..."

-- !!!! TLDR !!!!
-- ~~~~~~~~~~~~~~~~~~~~~

-- CALL FOUND_PERSON FUNCTION WITH USERNAME AND PASSWORD AS VARCHARS (STRINGS).
-- RETURNS PERSON_ID AS INT. IF ONE ISN'T FOUND, RETURNS NULL.

SELECT FOUND_PERSON("SCHEDULER","123");
-- THIS RETURNS 1

SELECT FOUND_PERSON("FAKE","USER");
-- THIS RETURNS NULL

-- CALL FOUND_TYPE FUNCTION WITH PERSON_ID AS INT.
-- RETURNS PERSON_TYPE AS VARCHAR (STRING). IF ONE ISN'T FOUND, RETURNS NULL.

SELECT FOUND_TYPE(1);
-- THIS RETURNS "SCHEDULER, Full Name"

SELECT FOUND_TYPE(-1);
-- THIS RETURNS NULL

-- --------------------------------------------
-- CALLING FUNCTIONS
-- --------------------------------------------

CREATE DEFINER=`root`@`localhost` FUNCTION `CONFLICT_APPT_NOTIF`() RETURNS varchar(5) CHARSET utf8mb4
    DETERMINISTIC
BEGIN

DECLARE NOTIF VARCHAR(5) DEFAULT "FALSE";
DECLARE COUNT INT;

SELECT COUNT(*) INTO COUNT
FROM PATIENT_APPOINTMENT
WHERE THERAPIST_ID = 0;

IF COUNT > 0 THEN
	SET NOTIF = "TRUE";
END IF;

RETURN NOTIF;
END


CREATE DEFINER=`root`@`localhost` FUNCTION `FIND_PATIENT`(F_NAME VARCHAR(30), L_NAME VARCHAR(30), EMAIL_ADDR VARCHAR(100), PHONE_NUM VARCHAR(20)) RETURNS int
    DETERMINISTIC
BEGIN

DECLARE P_ID INT;

	IF (EMAIL_ADDR IS NULL) AND (PHONE_NUM IS NULL) THEN
		SET P_ID = -1;
	ELSE
		IF EMAIL_ADDR IS NOT NULL THEN
			select patient_id INTO P_ID
            from PATIENT 
            where UPPER(patient_email) = UPPER(EMAIL_ADDR) 
				and person_id in 
					(
						SELECT PERSON_ID 
                        FROM PERSON 
                        WHERE UPPER(FIRST_NAME) = UPPER(F_NAME) 
							and UPPER(LAST_NAME) = UPPER(L_NAME)
					)
			LIMIT 1;
		ELSE
			select patient_id INTO P_ID
            from PATIENT 
            where PATIENT_PHONE = PHONE_NUM 
				and person_id in 
					(
						SELECT PERSON_ID 
                        FROM PERSON 
                        WHERE UPPER(FIRST_NAME) = UPPER(F_NAME) 
							and UPPER(LAST_NAME) = UPPER(L_NAME)
					)
			LIMIT 1;
        END IF;
	END IF;

RETURN P_ID;
END


CREATE DEFINER=`root`@`localhost` FUNCTION `FOUND_PERSON`(NAME VARCHAR(30), PASS VARCHAR(30)) RETURNS int
    DETERMINISTIC
BEGIN

DECLARE FOUND_PERSON INT;

SELECT PERSON_ID INTO FOUND_PERSON 
FROM LOGIN_INFORMATION
WHERE 
	USERNAME = NAME
    AND USER_PASSWORD = PASS;
    
RETURN FOUND_PERSON;
END


CREATE DEFINER=`root`@`localhost` FUNCTION `FOUND_TYPE`(ID INT) RETURNS varchar(50) CHARSET utf8mb4
    DETERMINISTIC
BEGIN

DECLARE FOUND_TYPE VARCHAR(15);
DECLARE F_NAME VARCHAR(30);
DECLARE L_NAME VARCHAR(30);

DECLARE FOUND_STRING VARCHAR(50);

SELECT PERSON_TYPE, FIRST_NAME, LAST_NAME INTO FOUND_TYPE, F_NAME, L_NAME 
FROM PERSON
WHERE PERSON_ID = ID;

SET FOUND_STRING = CONCAT(FOUND_TYPE, ", ", F_NAME, " ", L_NAME);

RETURN FOUND_STRING;
END


CREATE DEFINER=`root`@`localhost` FUNCTION `GET_CERT_INFO`(CERT VARCHAR(15)) RETURNS varchar(15000) CHARSET utf8mb4
    DETERMINISTIC
BEGIN

DECLARE C_DEFINITION VARCHAR(100);
DECLARE C_TYPE VARCHAR(30);
DECLARE TEMP_COUNT INT DEFAULT 1;
DECLARE C_COUNT INT;

DECLARE TEMP_STRING VARCHAR(15000);
DECLARE CERT_STRING VARCHAR(15000);

IF CERT IS NULL THEN

	SELECT COUNT(*) INTO C_COUNT FROM CERTIFICATIONS;
	
    WHILE TEMP_COUNT <= C_COUNT DO

	WITH MY_CTE AS 
	(
        SELECT CERT_NAME, THERAPY_TYPE, CERT_DEFINITION,
				row_number() OVER ( order by CERT_NAME ) as ROWNUM
		FROM CERTIFICATIONS
	)
	SELECT CERT_NAME, THERAPY_TYPE, CERT_DEFINITION
	INTO CERT, C_TYPE, C_DEFINITION
	FROM    MY_CTE
	WHERE   ROWNUM = TEMP_COUNT;
    
    IF (TEMP_COUNT = 1) THEN
		SET CERT_STRING = CONCAT (CERT, ", ", C_DEFINITION, ", ", C_TYPE);
	ELSE
		SET TEMP_STRING = CERT_STRING;
		SET CERT_STRING = CONCAT(TEMP_STRING, "; ", CERT, ", ", C_DEFINITION, ", ", C_TYPE);
    END IF;
    
    SET TEMP_COUNT = TEMP_COUNT + 1;
END WHILE;
    
ELSE

SELECT THERAPY_TYPE, CERT_DEFINITION, CERT_NAME INTO C_TYPE, C_DEFINITION, CERT
FROM CERTIFICATIONS
WHERE UPPER(CERT_NAME) = UPPER(CERT);

IF C_TYPE IS NULL THEN
	SET CERT_STRING = "NOT A VALID CERT";
ELSE
	SET CERT_STRING = CONCAT(CERT, ", ", C_DEFINITION, ", ", C_TYPE);
END IF;

END IF;

RETURN CERT_STRING;
END


CREATE DEFINER=`root`@`localhost` FUNCTION `GET_PATIENT_INFO`(PT_ID INT) RETURNS varchar(500) CHARSET utf8mb4
    DETERMINISTIC
BEGIN

DECLARE F_NAME VARCHAR(30);
DECLARE L_NAME VARCHAR(30);
DECLARE EMAIL VARCHAR(100);
DECLARE PHONE VARCHAR(20);
DECLARE NOTES VARCHAR(300) DEFAULT "";
DECLARE A_ID INT;
DECLARE PAT_ID INT;
DECLARE PER_ID INT;
DECLARE PATIENT_INFO VARCHAR(500);

IF PT_ID IS NOT NULL THEN
	
    SELECT PERSON_ID INTO PER_ID FROM PATIENT WHERE PATIENT_ID = PT_ID;
    
	SELECT APPT_ID INTO A_ID FROM PATIENT_APPOINTMENT WHERE PATIENT_ID = PT_ID ORDER BY APPT_ID DESC LIMIT 1;
	SELECT APPT_NOTES INTO NOTES FROM PATIENT_APPOINTMENT WHERE APPT_ID = A_ID;
	SELECT FIRST_NAME, LAST_NAME INTO F_NAME, L_NAME FROM PERSON WHERE PERSON_ID = PER_ID;
	SELECT PATIENT_EMAIL, PATIENT_PHONE INTO EMAIL, PHONE FROM PATIENT WHERE PATIENT_ID = PT_ID;

ELSE

	SELECT MAX(APPT_ID) INTO A_ID FROM PATIENT_APPOINTMENT;
	SELECT PATIENT_ID, APPT_NOTES INTO PAT_ID, NOTES FROM PATIENT_APPOINTMENT WHERE APPT_ID = A_ID;
	SELECT PERSON_ID INTO PER_ID FROM PATIENT WHERE PATIENT_ID = PAT_ID;
	SELECT FIRST_NAME, LAST_NAME INTO F_NAME, L_NAME FROM PERSON WHERE PERSON_ID = PER_ID;
	SELECT PATIENT_EMAIL, PATIENT_PHONE INTO EMAIL, PHONE FROM PATIENT WHERE PATIENT_ID = PAT_ID;

END IF;

IF NOTES IS NULL THEN
	SET NOTES = "NO APPOINTMENT NOTES";
END IF;

IF EMAIL IS NULL THEN
	SET EMAIL = "NO EMAIL";
END IF;

IF PHONE IS NULL THEN
	SET PHONE = "NO PHONE";
END IF;

SET PATIENT_INFO = CONCAT(F_NAME, ", ", L_NAME, ", ", EMAIL, ", ", PHONE, ", ", NOTES);

RETURN PATIENT_INFO;
END


CREATE DEFINER=`root`@`localhost` FUNCTION `GET_THERAPIST_CERTS`(T_ID INT) RETURNS varchar(80) CHARSET utf8mb4
    DETERMINISTIC
BEGIN

DECLARE TEMP_CERT_LIST VARCHAR(80);
DECLARE CERT_LIST VARCHAR(80);

DECLARE T_AET CHAR(1);
DECLARE T_CAPP_OB CHAR(1);
DECLARE T_CAPP_PELVIC CHAR(1);
DECLARE T_CHT CHAR(1);
DECLARE T_CKTP CHAR(1);
DECLARE T_CLT CHAR(1);
DECLARE T_CREX CHAR(1);
DECLARE T_CSCS CHAR(1);
DECLARE T_CYT CHAR(1);
DECLARE T_GCS CHAR(1);
DECLARE T_LMT CHAR(1);
DECLARE T_OCS CHAR(1);
DECLARE T_PAS CHAR(1);
DECLARE T_PCS CHAR(1);
DECLARE T_SCS CHAR(1);
DECLARE T_WCS CHAR(1);

SELECT AET, CAPP_OB, CAPP_PELVIC, CHT, CKTP, CLT, CREX, CSCS, CYT, GCS, LMT, OCS, PAS, PCS, SCS, WCS
	INTO T_AET, T_CAPP_OB, T_CAPP_PELVIC, T_CHT, T_CKTP, T_CLT, T_CREX, T_CSCS, T_CYT, T_GCS, T_LMT, T_OCS, T_PAS, T_PCS, T_SCS, T_WCS
FROM THERAPIST_CERTIFICATIONS
WHERE THERAPIST_ID = T_ID;

IF T_AET = 'Y' THEN
	IF CERT_LIST IS NULL THEN
		SET CERT_LIST = "AET";
	else
		SET TEMP_CERT_LIST = CERT_LIST;
        SET CERT_LIST = CONCAT(TEMP_CERT_LIST, ", ", "AET");
	END IF;
END IF;
IF T_CAPP_OB = 'Y' THEN
	IF CERT_LIST IS NULL THEN
		SET CERT_LIST = "CAPP_OB";
	else
		SET TEMP_CERT_LIST = CERT_LIST;
        SET CERT_LIST = CONCAT(TEMP_CERT_LIST, ", ", "CAPP_OB");
	END IF;
END IF;
IF T_CAPP_PELVIC = 'Y' THEN
	IF CERT_LIST IS NULL THEN
		SET CERT_LIST = "CAPP_PELVIC";
	else
		SET TEMP_CERT_LIST = CERT_LIST;
        SET CERT_LIST = CONCAT(TEMP_CERT_LIST, ", ", "CAPP_PELVIC");
	END IF;
END IF;
IF T_CHT = 'Y' THEN
	IF CERT_LIST IS NULL THEN
		SET CERT_LIST = "CHT";
	else
		SET TEMP_CERT_LIST = CERT_LIST;
        SET CERT_LIST = CONCAT(TEMP_CERT_LIST, ", ", "CHT");
	END IF;
END IF;
IF T_CKTP = 'Y' THEN
	IF CERT_LIST IS NULL THEN
		SET CERT_LIST = "CKTP";
	else
		SET TEMP_CERT_LIST = CERT_LIST;
        SET CERT_LIST = CONCAT(TEMP_CERT_LIST, ", ", "CKTP");
	END IF;
END IF;
IF T_CLT = 'Y' THEN
	IF CERT_LIST IS NULL THEN
		SET CERT_LIST = "CLT";
	else
		SET TEMP_CERT_LIST = CERT_LIST;
        SET CERT_LIST = CONCAT(TEMP_CERT_LIST, ", ", "CLT");
	END IF;
END IF;
IF T_CREX = 'Y' THEN
	IF CERT_LIST IS NULL THEN
		SET CERT_LIST = "CREX";
	else
		SET TEMP_CERT_LIST = CERT_LIST;
        SET CERT_LIST = CONCAT(TEMP_CERT_LIST, ", ", "CREX");
	END IF;
END IF;
IF T_CSCS = 'Y' THEN
	IF CERT_LIST IS NULL THEN
		SET CERT_LIST = "CSCS";
	else
		SET TEMP_CERT_LIST = CERT_LIST;
        SET CERT_LIST = CONCAT(TEMP_CERT_LIST, ", ", "CSCS");
	END IF;
END IF;
IF T_CYT = 'Y' THEN
	IF CERT_LIST IS NULL THEN
		SET CERT_LIST = "CYT";
	else
		SET TEMP_CERT_LIST = CERT_LIST;
        SET CERT_LIST = CONCAT(TEMP_CERT_LIST, ", ", "CYT");
	END IF;
END IF;
IF T_GCS = 'Y' THEN
	IF CERT_LIST IS NULL THEN
		SET CERT_LIST = "GCS";
	else
		SET TEMP_CERT_LIST = CERT_LIST;
        SET CERT_LIST = CONCAT(TEMP_CERT_LIST, ", ", "GCS");
	END IF;
END IF;
IF T_LMT = 'Y' THEN
	IF CERT_LIST IS NULL THEN
		SET CERT_LIST = "LMT";
	else
		SET TEMP_CERT_LIST = CERT_LIST;
        SET CERT_LIST = CONCAT(TEMP_CERT_LIST, ", ", "LMT");
	END IF;
END IF;
IF T_OCS = 'Y' THEN
	IF CERT_LIST IS NULL THEN
		SET CERT_LIST = "OCS";
	else
		SET TEMP_CERT_LIST = CERT_LIST;
        SET CERT_LIST = CONCAT(TEMP_CERT_LIST, ", ", "OCS");
	END IF;
END IF;
IF T_PAS = 'Y' THEN
	IF CERT_LIST IS NULL THEN
		SET CERT_LIST = "PAS";
	else
		SET TEMP_CERT_LIST = CERT_LIST;
        SET CERT_LIST = CONCAT(TEMP_CERT_LIST, ", ", "PAS");
	END IF;
END IF;
IF T_PCS = 'Y' THEN
	IF CERT_LIST IS NULL THEN
		SET CERT_LIST = "PCS";
	else
		SET TEMP_CERT_LIST = CERT_LIST;
        SET CERT_LIST = CONCAT(TEMP_CERT_LIST, ", ", "PCS");
	END IF;
END IF;
IF T_SCS = 'Y' THEN
	IF CERT_LIST IS NULL THEN
		SET CERT_LIST = "SCS";
	else
		SET TEMP_CERT_LIST = CERT_LIST;
        SET CERT_LIST = CONCAT(TEMP_CERT_LIST, ", ", "SCS");
	END IF;
END IF;
IF T_WCS = 'Y' THEN
	IF CERT_LIST IS NULL THEN
		SET CERT_LIST = "WCS";
	else
		SET TEMP_CERT_LIST = CERT_LIST;
        SET CERT_LIST = CONCAT(TEMP_CERT_LIST, ", ", "WCS");
	END IF;
END IF;

IF CERT_LIST IS NULL THEN
	SET CERT_LIST = "NO CERTS";
END IF;

RETURN CERT_LIST;
END


CREATE DEFINER=`root`@`localhost` FUNCTION `GET_THERAPIST_RATING`() RETURNS int
    DETERMINISTIC
BEGIN

DECLARE RATING DECIMAL(4,3);
DECLARE TEMP_RATING DECIMAL(4,3);
DECLARE T_ID INT;
DECLARE REVIEW_COUNT INT;
DECLARE T_COUNT INT;
DECLARE TEMP_COUNT INT DEFAULT 1;

DECLARE TEMP_STRING VARCHAR(3000);
DECLARE RATINGS_STRING VARCHAR(3000);

SELECT COUNT(*) INTO T_COUNT FROM THERAPIST_RATINGS;

IF T_COUNT != 0 THEN

			WHILE TEMP_COUNT <= T_COUNT DO
				WITH MY_CTE AS 
				(
					SELECT THERAPIST_ID, THERAPIST_RATING, THERAPIST_REVIEWS,
						row_number() OVER ( order by T_ID ) as ROWNUM
					FROM THERAPIST_RATINGS
				)
				SELECT  THERAPIST_ID, THERAPIST_RATING, THERAPIST_REVIEWS
					INTO T_ID, TEMP_RATING, REVIEW_COUNT
				FROM    MY_CTE
				WHERE   ROWNUM = TEMP_COUNT;
				
				SET TEMP_COUNT = TEMP_COUNT + 1;
                
                IF TEMP_RATING IS NULL THEN
					SET RATING = 0;
                    SET REVIEW_COUNT = 0;
				ELSE
					-- SET RATING = ROUND(TEMP_RATING);
                    SET RATING = TEMP_RATING;
				END IF;
				
				IF RATINGS_STRING IS NULL THEN
					SET RATINGS_STRING = CONCAT(T_ID, ", ", RATING, ", ", REVIEW_COUNT);
				else
					SET TEMP_STRING = RATINGS_STRING;
					SET RATINGS_STRING = CONCAT(TEMP_STRING, "; ", T_ID, ", ", RATING, ", ", REVIEW_COUNT);
				END IF;
                
			END WHILE;

ELSE
	SET RATINGS_STRING = "NO THERAPISTS FOUND";
END IF;

RETURN RATINGS_STRING;
END


CREATE DEFINER=`root`@`localhost` FUNCTION `GET_THERAPIST_RATINGS`() RETURNS varchar(3000) CHARSET utf8mb4
    DETERMINISTIC
BEGIN

-- DECLARE RATING DECIMAL(4,3);
-- DECLARE TEMP_RATING DECIMAL(4,3);
DECLARE RATING INT;
DECLARE TEMP_RATING INT;
DECLARE T_ID INT;
DECLARE REVIEW_COUNT INT;
DECLARE T_COUNT INT;
DECLARE TEMP_COUNT INT DEFAULT 1;

DECLARE TEMP_STRING VARCHAR(3000);
DECLARE RATINGS_STRING VARCHAR(3000);

SELECT COUNT(*) INTO T_COUNT FROM THERAPIST_RATINGS;

IF T_COUNT != 0 THEN

			WHILE TEMP_COUNT <= T_COUNT DO
				WITH MY_CTE AS 
				(
					SELECT THERAPIST_ID, THERAPIST_RATING, THERAPIST_REVIEWS,
						row_number() OVER ( order by T_ID ) as ROWNUM
					FROM THERAPIST_RATINGS
				)
				SELECT  THERAPIST_ID, THERAPIST_RATING, THERAPIST_REVIEWS
					INTO T_ID, TEMP_RATING, REVIEW_COUNT
				FROM    MY_CTE
				WHERE   ROWNUM = TEMP_COUNT;
				
				SET TEMP_COUNT = TEMP_COUNT + 1;
                
                IF TEMP_RATING IS NULL THEN
					SET RATING = 0;
                    SET REVIEW_COUNT = 0;
				ELSE
					-- SET RATING = ROUND(TEMP_RATING);
                    SET RATING = TEMP_RATING;
				END IF;
				
				IF RATINGS_STRING IS NULL THEN
					SET RATINGS_STRING = CONCAT(T_ID, ", ", RATING, ", ", REVIEW_COUNT);
				else
					SET TEMP_STRING = RATINGS_STRING;
					SET RATINGS_STRING = CONCAT(TEMP_STRING, "; ", T_ID, ", ", RATING, ", ", REVIEW_COUNT);
				END IF;
                
			END WHILE;

ELSE
	SET RATINGS_STRING = "NO THERAPISTS FOUND";
END IF;

RETURN RATINGS_STRING;
END


CREATE DEFINER=`root`@`localhost` FUNCTION `GET_THERAPISTS`() RETURNS varchar(1000) CHARSET utf8mb4
    DETERMINISTIC
BEGIN

DECLARE THERAPIST_COUNT INT DEFAULT 1;
DECLARE TEMP_COUNT INT DEFAULT 1;
DECLARE TEMP_ID INT;
DECLARE TEMP_FIRST VARCHAR(300);
DECLARE TEMP_LAST VARCHAR(300);
DECLARE TEMP_PEOPLE VARCHAR(1000);
DECLARE PEOPLE VARCHAR(1000) DEFAULT " ";
DECLARE T_ID INT;

SET THERAPIST_COUNT = (SELECT COUNT(*) FROM TEMP_TABLE);

WHILE TEMP_COUNT <= THERAPIST_COUNT DO

	WITH MY_CTE AS 
	(
        SELECT PERSON_ID, FIRST_NAME, LAST_NAME,
				row_number() OVER ( order by FIRST_NAME ) as ROWNUM
		FROM TEMP_TABLE T, PERSON P
		WHERE T.P_ID = P.PERSON_ID
	)
	SELECT PERSON_ID, FIRST_NAME, LAST_NAME
	INTO TEMP_ID, TEMP_FIRST, TEMP_LAST
	FROM    MY_CTE
	WHERE   ROWNUM = TEMP_COUNT;

	SELECT T.THERAPIST_ID INTO T_ID FROM THERAPIST T WHERE T.PERSON_ID = TEMP_ID;
    
    IF (TEMP_COUNT = 1) THEN
		SET PEOPLE = CONCAT (T_ID, " ", TEMP_FIRST, " ", TEMP_LAST);
	ELSE
		SET TEMP_PEOPLE = PEOPLE;
		SET PEOPLE = CONCAT(TEMP_PEOPLE, ",", T_ID, " ", TEMP_FIRST, " ", TEMP_LAST);
    END IF;
    
    SET TEMP_COUNT = TEMP_COUNT + 1;
END WHILE;
    
RETURN PEOPLE;
END


CREATE DEFINER=`root`@`localhost` FUNCTION `RETURN_APPT_IDS`(T_ID INT, START_DATE DATE, END_DATE DATE) RETURNS varchar(16000) CHARSET utf8mb4
    DETERMINISTIC
BEGIN

DECLARE TEMP_COUNT INT DEFAULT 1;
DECLARE A_COUNT INT;
DECLARE A_ID INT;
DECLARE TEMP_ID_LIST VARCHAR(16000);
DECLARE ID_LIST VARCHAR(16000);

-- DECLARE CURR_DAY DATE;
-- DECLARE MAX_DAY DATE;

-- SET CURR_DAY = current_date();
-- SET MAX_DAY = adddate(CURR_DAY, INTERVAL 30 DAY);

IF T_ID IS NOT NULL THEN
	SELECT COUNT(*) INTO A_COUNT FROM PATIENT_APPOINTMENT WHERE THERAPIST_ID = T_ID AND APPT_DAY >= START_DATE AND APPT_DAY <= END_DATE AND PATIENT_ID != 0;
ELSE
	SELECT COUNT(*) INTO A_COUNT FROM PATIENT_APPOINTMENT WHERE APPT_DAY >= START_DATE AND APPT_DAY <= END_DATE AND PATIENT_ID != 0;
END IF;

IF A_COUNT != 0 THEN

			WHILE TEMP_COUNT <= A_COUNT DO
				WITH MY_CTE AS 
				(
					SELECT APPT_ID,
						row_number() OVER ( order by APPT_ID ) as ROWNUM
					FROM PATIENT_APPOINTMENT
                    WHERE IF(T_ID IS NOT NULL, THERAPIST_ID = T_ID, THERAPIST_ID IS NOT NULL)
                    -- THERAPIST_ID = T_ID
						AND APPT_DAY >= START_DATE AND APPT_DAY <= END_DATE
                        AND PATIENT_ID != 0
				)
				SELECT  APPT_ID
					INTO A_ID
				FROM    MY_CTE
				WHERE   ROWNUM = TEMP_COUNT;
				
				SET TEMP_COUNT = TEMP_COUNT + 1;
				
				IF ID_LIST IS NULL THEN
					SET ID_LIST = A_ID;
				else
					SET TEMP_ID_LIST = ID_LIST;
					SET ID_LIST = CONCAT(TEMP_ID_LIST, ", ", A_ID);
				END IF;
                
			END WHILE;

ELSE
	SET ID_LIST = "NO IDS FOUND";
END IF;

RETURN ID_LIST;
END


CREATE DEFINER=`root`@`localhost` FUNCTION `RETURN_APPT_INFORMATION`(A_ID INT) RETURNS varchar(1000) CHARSET utf8mb4
    DETERMINISTIC
BEGIN

DECLARE P_ID INT;
DECLARE T_ID INT;
DECLARE A_DAY DATE;
DECLARE START_TIME TIME;
DECLARE END_TIME TIME;
DECLARE T_TYPE VARCHAR(30);
DECLARE NOTES VARCHAR(300);
DECLARE A_INFO VARCHAR(1000);

SELECT PATIENT_ID, THERAPIST_ID, APPT_DAY, APPT_START_TIME, APPT_END_TIME, THERAPY_TYPE, APPT_NOTES
	INTO P_ID, T_ID, A_DAY, START_TIME, END_TIME, T_TYPE, NOTES
FROM PATIENT_APPOINTMENT
WHERE APPT_ID = A_ID;

IF NOTES IS NULL THEN
	SET NOTES = "NO APPOINTMENT NOTES";
END IF;

IF T_ID IS NOT NULL THEN
	SET A_INFO = CONCAT(P_ID, ", ", T_ID, ", ", A_DAY, ", ", START_TIME, ", ", END_TIME, ", ", T_TYPE, ", ", NOTES);
ELSE
	SET A_INFO = "NOT A VALID APPOINTMENT ID";
END IF;

RETURN A_INFO;

END


CREATE DEFINER=`root`@`localhost` FUNCTION `RETURN_CONFLICTING_APPT_IDS`() RETURNS varchar(16000) CHARSET utf8mb4
    DETERMINISTIC
BEGIN

DECLARE TEMP_COUNT INT DEFAULT 1;
DECLARE A_COUNT INT;
DECLARE A_ID INT;
DECLARE TEMP_ID_LIST VARCHAR(2500);
DECLARE ID_LIST VARCHAR(2500);

SELECT COUNT(*) INTO A_COUNT FROM PATIENT_APPOINTMENT WHERE THERAPIST_ID = 0;

IF A_COUNT != 0 THEN

			WHILE TEMP_COUNT <= A_COUNT DO
				WITH MY_CTE AS 
				(
					SELECT APPT_ID,
						row_number() OVER ( order by APPT_ID ) as ROWNUM
					FROM PATIENT_APPOINTMENT
                    WHERE THERAPIST_ID = 0
				)
				SELECT  APPT_ID
					INTO A_ID
				FROM    MY_CTE
				WHERE   ROWNUM = TEMP_COUNT;
				
				SET TEMP_COUNT = TEMP_COUNT + 1;
				
				IF ID_LIST IS NULL THEN
					SET ID_LIST = A_ID;
				else
					SET TEMP_ID_LIST = ID_LIST;
					SET ID_LIST = CONCAT(TEMP_ID_LIST, ", ", A_ID);
				END IF;
                
			END WHILE;

ELSE
	SET ID_LIST = "NO IDS FOUND";
END IF;

RETURN ID_LIST;
END


CREATE DEFINER=`root`@`localhost` FUNCTION `RETURN_CONFLICTING_APPTS`(T_ID INT, T_DATE DATE, OG_START_TIME TIME, OG_END_TIME TIME) RETURNS varchar(100) CHARSET utf8mb4
    DETERMINISTIC
BEGIN

DECLARE TEMP_COUNT INT DEFAULT 1;
DECLARE ID_COUNT INT;

DECLARE A_ID INT;

DECLARE TEMP_ID_LIST VARCHAR(100);
DECLARE ID_LIST VARCHAR(100);

SELECT COUNT(*) INTO ID_COUNT 
FROM PATIENT_APPOINTMENT 
WHERE APPT_DAY = T_DATE
	AND OG_START_TIME <= APPT_START_TIME
    AND OG_END_TIME >= APPT_END_TIME
    AND THERAPIST_ID = T_ID
    AND PATIENT_ID != 0;
    
IF ID_COUNT != 0 THEN

			WHILE TEMP_COUNT <= ID_COUNT DO
				WITH MY_CTE AS 
				(
					SELECT APPT_ID,
						row_number() OVER ( order by APPT_ID ) as ROWNUM
					FROM PATIENT_APPOINTMENT
                    WHERE APPT_DAY = T_DATE
						AND OG_START_TIME <= APPT_START_TIME
						AND OG_END_TIME >= APPT_END_TIME
						AND THERAPIST_ID = T_ID
                        AND PATIENT_ID != 0
				)
				SELECT  APPT_ID
					INTO A_ID
				FROM    MY_CTE
				WHERE   ROWNUM = TEMP_COUNT;
				
				SET TEMP_COUNT = TEMP_COUNT + 1;
				
				IF ID_LIST IS NULL THEN
					SET ID_LIST = A_ID;
				else
					SET TEMP_ID_LIST = ID_LIST;
					SET ID_LIST = CONCAT(TEMP_ID_LIST, ", ", A_ID);
				END IF;
                
			END WHILE;

ELSE
	SET ID_LIST = "NO IDS FOUND";
END IF;

RETURN ID_LIST;
END


CREATE DEFINER=`root`@`localhost` FUNCTION `RETURN_DEFAULT_SCHEDULE`(T_ID INT) RETURNS varchar(200) CHARSET utf8mb4
    DETERMINISTIC
BEGIN

DECLARE SCHED_STRING VARCHAR(200);
DECLARE DAY_NAME VARCHAR(10);
DECLARE START_TIME TIME;
DECLARE END_TIME TIME;

SET DAY_NAME = "MONDAY";

SELECT MON_START_TIME, MON_END_TIME INTO START_TIME, END_TIME
FROM DEFAULT_SCHEDULE 
WHERE THERAPIST_ID = T_ID;

IF (START_TIME IS NOT NULL) AND (END_TIME IS NOT NULL) THEN
	-- IF SCHED_STRING IS NULL THEN
		-- SET SCHED_STRING = CONCAT(DAY_NAME, ", ", START_TIME, ", ", END_TIME);
    -- ELSE
		-- SET SCHED_STRING = CONCAT(SCHED_STRING, "; ", DAY_NAME, ", ", START_TIME, ", ", END_TIME);
    -- END IF;
    SET SCHED_STRING = CONCAT(DAY_NAME, ", ", START_TIME, ", ", END_TIME);
ELSE
	SET START_TIME = "00:00:00";
    SET END_TIME = "00:00:00";

	SET SCHED_STRING = CONCAT(DAY_NAME, ", ", START_TIME, ", ", END_TIME);
END IF;

SET DAY_NAME = "TUESDAY";

SELECT TUE_START_TIME, TUE_END_TIME INTO START_TIME, END_TIME
FROM DEFAULT_SCHEDULE 
WHERE THERAPIST_ID = T_ID;

IF (START_TIME IS NOT NULL) AND (END_TIME IS NOT NULL) THEN
	-- IF SCHED_STRING IS NULL THEN
		-- SET SCHED_STRING = CONCAT(DAY_NAME, ", ", START_TIME, ", ", END_TIME);
    -- ELSE
		-- SET SCHED_STRING = CONCAT(SCHED_STRING, "; ", DAY_NAME, ", ", START_TIME, ", ", END_TIME);
    -- END IF;
    SET SCHED_STRING = CONCAT(SCHED_STRING, "; ", DAY_NAME, ", ", START_TIME, ", ", END_TIME);
ELSE
	SET START_TIME = "00:00:00";
    SET END_TIME = "00:00:00";

	SET SCHED_STRING = CONCAT(SCHED_STRING, "; ", DAY_NAME, ", ", START_TIME, ", ", END_TIME);
END IF;

SET DAY_NAME = "WEDNESDAY";

SELECT WED_START_TIME, WED_END_TIME INTO START_TIME, END_TIME
FROM DEFAULT_SCHEDULE 
WHERE THERAPIST_ID = T_ID;

IF (START_TIME IS NOT NULL) AND (END_TIME IS NOT NULL) THEN
	-- IF SCHED_STRING IS NULL THEN
		-- SET SCHED_STRING = CONCAT(DAY_NAME, ", ", START_TIME, ", ", END_TIME);
    -- ELSE
		-- SET SCHED_STRING = CONCAT(SCHED_STRING, "; ", DAY_NAME, ", ", START_TIME, ", ", END_TIME);
    -- END IF;
    SET SCHED_STRING = CONCAT(SCHED_STRING, "; ", DAY_NAME, ", ", START_TIME, ", ", END_TIME);
ELSE
	SET START_TIME = "00:00:00";
    SET END_TIME = "00:00:00";

	SET SCHED_STRING = CONCAT(SCHED_STRING, "; ", DAY_NAME, ", ", START_TIME, ", ", END_TIME);
END IF;

SET DAY_NAME = "THURSDAY";

SELECT THU_START_TIME, THU_END_TIME INTO START_TIME, END_TIME
FROM DEFAULT_SCHEDULE 
WHERE THERAPIST_ID = T_ID;

IF (START_TIME IS NOT NULL) AND (END_TIME IS NOT NULL) THEN
	-- IF SCHED_STRING IS NULL THEN
		-- SET SCHED_STRING = CONCAT(DAY_NAME, ", ", START_TIME, ", ", END_TIME);
    -- ELSE
		-- SET SCHED_STRING = CONCAT(SCHED_STRING, "; ", DAY_NAME, ", ", START_TIME, ", ", END_TIME);
    -- END IF;
    SET SCHED_STRING = CONCAT(SCHED_STRING, "; ", DAY_NAME, ", ", START_TIME, ", ", END_TIME);
ELSE
	SET START_TIME = "00:00:00";
    SET END_TIME = "00:00:00";

	SET SCHED_STRING = CONCAT(SCHED_STRING, "; ", DAY_NAME, ", ", START_TIME, ", ", END_TIME);
END IF;

SET DAY_NAME = "FRIDAY";

SELECT FRI_START_TIME, FRI_END_TIME INTO START_TIME, END_TIME
FROM DEFAULT_SCHEDULE 
WHERE THERAPIST_ID = T_ID;

IF (START_TIME IS NOT NULL) AND (END_TIME IS NOT NULL) THEN
	-- IF SCHED_STRING IS NULL THEN
		-- SET SCHED_STRING = CONCAT(DAY_NAME, ", ", START_TIME, ", ", END_TIME);
    -- ELSE
		-- SET SCHED_STRING = CONCAT(SCHED_STRING, "; ", DAY_NAME, ", ", START_TIME, ", ", END_TIME);
    -- END IF;
    SET SCHED_STRING = CONCAT(SCHED_STRING, "; ", DAY_NAME, ", ", START_TIME, ", ", END_TIME);
ELSE
	SET START_TIME = "00:00:00";
    SET END_TIME = "00:00:00";

	SET SCHED_STRING = CONCAT(SCHED_STRING, "; ", DAY_NAME, ", ", START_TIME, ", ", END_TIME);
END IF;

SET DAY_NAME = "SATURDAY";

SELECT SAT_START_TIME, SAT_END_TIME INTO START_TIME, END_TIME
FROM DEFAULT_SCHEDULE 
WHERE THERAPIST_ID = T_ID;

IF (START_TIME IS NOT NULL) AND (END_TIME IS NOT NULL) THEN
	-- IF SCHED_STRING IS NULL THEN
		-- SET SCHED_STRING = CONCAT(DAY_NAME, ", ", START_TIME, ", ", END_TIME);
    -- ELSE
		-- SET SCHED_STRING = CONCAT(SCHED_STRING, "; ", DAY_NAME, ", ", START_TIME, ", ", END_TIME);
    -- END IF;
    SET SCHED_STRING = CONCAT(SCHED_STRING, "; ", DAY_NAME, ", ", START_TIME, ", ", END_TIME);
ELSE
	SET START_TIME = "00:00:00";
    SET END_TIME = "00:00:00";

	SET SCHED_STRING = CONCAT(SCHED_STRING, "; ", DAY_NAME, ", ", START_TIME, ", ", END_TIME);
END IF;

RETURN SCHED_STRING;
END


CREATE DEFINER=`root`@`localhost` FUNCTION `RETURN_MOD_CONFLICTING_APPTS`(T_ID INT, T_DATE DATE, OG_START_TIME TIME, OG_END_TIME TIME, NEW_START_TIME TIME, NEW_END_TIME TIME, NEW_DAY DATE) RETURNS varchar(200) CHARSET utf8mb4
    DETERMINISTIC
BEGIN

DECLARE START_TIME TIME;
DECLARE END_TIME TIME;
DECLARE DAY DATE;
-- DECLARE T_ID INT;

DECLARE TEMP_COUNT INT DEFAULT 1;
DECLARE ID_COUNT INT;

DECLARE A_ID INT;

DECLARE TEMP_ID_LIST VARCHAR(200);
DECLARE ID_LIST VARCHAR(200);

DECLARE TEMP_FOUND_ID VARCHAR(10);
DECLARE MISSING_IDS VARCHAR(150);
DECLARE ORIGINAL_IDS_COUNT INT;
DECLARE TEMP_OG_IDS_COUNT INT DEFAULT 1;

SELECT RETURN_CONFLICTING_APPTS(T_ID, T_DATE, OG_START_TIME, OG_END_TIME) INTO @INCLUDED_APPTS;

IF NEW_START_TIME IS NOT NULL THEN
	SET START_TIME = NEW_START_TIME;
else
	-- SELECT SCHED_START_TIME INTO START_TIME FROM SCHEDULE WHERE SCHEDULE_ID = S_ID;
    SET START_TIME = OG_START_TIME;
END IF;
IF NEW_END_TIME IS NOT NULL THEN
	SET END_TIME = NEW_END_TIME;
else
	SET END_TIME = OG_END_TIME;
END IF;
IF NEW_DAY IS NOT NULL THEN
	SET DAY = NEW_DAY;
else
	SET DAY = T_DATE;
END IF;

SELECT COUNT(*) INTO ID_COUNT 
FROM PATIENT_APPOINTMENT 
WHERE APPT_DAY = DAY
	AND START_TIME <= APPT_START_TIME
    AND END_TIME >= APPT_END_TIME
    AND THERAPIST_ID = T_ID
    AND PATIENT_ID != 0;
    
IF ID_COUNT != 0 THEN

			WHILE TEMP_COUNT <= ID_COUNT DO
				WITH MY_CTE AS 
				(
					SELECT APPT_ID,
						row_number() OVER ( order by APPT_ID ) as ROWNUM
					FROM PATIENT_APPOINTMENT
                    WHERE APPT_DAY = DAY
						AND START_TIME <= APPT_START_TIME
						AND END_TIME >= APPT_END_TIME
						AND THERAPIST_ID = T_ID
                        AND PATIENT_ID != 0
				)
				SELECT  APPT_ID
					INTO A_ID
				FROM    MY_CTE
				WHERE   ROWNUM = TEMP_COUNT;
                
                SELECT REPLACE(@INCLUDED_APPTS, A_ID, "NULL") INTO @INCLUDED_APPTS;
				
				SET TEMP_COUNT = TEMP_COUNT + 1;
				
				IF ID_LIST IS NULL THEN
					SET ID_LIST = A_ID;
				else
					SET TEMP_ID_LIST = ID_LIST;
					SET ID_LIST = CONCAT(TEMP_ID_LIST, ", ", A_ID);
				END IF;
                
			END WHILE;

ELSE
	SET ID_LIST = "NO IDS FOUND";
END IF;

-- SELECT ((LENGTH(@INCLUDED_APPTS) - LENGTH(REPLACE(@INCLUDED_APPTS,",",""))) / LENGTH(",") + 1) INTO ORIGINAL_IDS_COUNT FROM DUAL;

-- SET ID_LIST = ORIGINAL_IDS_COUNT;

-- SELECT REPLACE(@INCLUDED_APPTS, " ,", "") INTO @INCLUDED_APPTS;

SET ID_LIST = @INCLUDED_APPTS;

RETURN ID_LIST;
-- RETURN ID_COUNT;
END


CREATE DEFINER=`root`@`localhost` FUNCTION `RETURN_PATIENT_APPTS`(F_NAME VARCHAR(30), L_NAME VARCHAR(30), EMAIL_ADDR VARCHAR(100), PHONE_NUM VARCHAR(20), APPOINTMENT_ID INT) RETURNS varchar(16000) CHARSET utf8mb4
    DETERMINISTIC
BEGIN

DECLARE TEMP_APPT_LIST VARCHAR(16000);
DECLARE APPT_LIST VARCHAR(16000);
DECLARE P_ID INT;
DECLARE PT_ID INT;
DECLARE APPT_COUNT INT;
DECLARE TEMP_COUNT INT default 1;

DECLARE A_NOTES VARCHAR(300);
DECLARE T_ID INT;

DECLARE A_ID INT;
DECLARE A_DAY DATE;
DECLARE A_S_TIME TIME;
DECLARE A_E_TIME TIME;
DECLARE T_TYPE VARCHAR(30);
DECLARE T_NAME VARCHAR(60);
DECLARE P_F_NAME VARCHAR(30);
DECLARE P_L_NAME VARCHAR(30);
DECLARE P_EMAIL VARCHAR(100);
DECLARE P_PHONE VARCHAR(20);

IF APPOINTMENT_ID IS NOT NULL THEN
	SET A_ID = APPOINTMENT_ID;
    
	SELECT PATIENT_ID, THERAPIST_ID, THERAPY_TYPE, APPT_DAY, APPT_START_TIME, APPT_END_TIME, APPT_NOTES 
		INTO PT_ID, T_ID, T_TYPE, A_DAY, A_S_TIME, A_E_TIME, A_NOTES FROM PATIENT_APPOINTMENT WHERE APPT_ID = APPOINTMENT_ID;
    
    SELECT PERSON_ID, PATIENT_EMAIL, PATIENT_PHONE INTO P_ID, EMAIL_ADDR, PHONE_NUM FROM PATIENT WHERE PATIENT_ID = PT_ID;
    SELECT FIRST_NAME, LAST_NAME INTO F_NAME, L_NAME FROM PERSON WHERE PERSON_ID = P_ID;
    
    SELECT PERSON_ID INTO P_ID FROM THERAPIST WHERE THERAPIST_ID = T_ID;
    SELECT CONCAT(FIRST_NAME, " ", LAST_NAME) INTO T_NAME FROM PERSON WHERE PERSON_ID = P_ID;
    
    IF A_NOTES IS NULL THEN
		SET A_NOTES = "";
	END IF;
    
    SET APPT_LIST = CONCAT(F_NAME, ", ", L_NAME, ", ", EMAIL_ADDR, ", ", PHONE_NUM, ", ", T_ID, ", ", T_NAME, ", ", T_TYPE, ", ", A_ID,  ", ", A_DAY, ", ", A_S_TIME, ", ", A_E_TIME, ", ", A_NOTES);
    
    IF APPT_LIST IS NULL THEN
		SET APPT_LIST = "NOT A VALID APPOINTMENT ID";
    END IF;
ELSE

	IF (EMAIL_ADDR IS NULL) AND (PHONE_NUM IS NULL) AND (F_NAME IS NULL) AND (L_NAME IS NULL) THEN
		SET APPT_LIST = "NO PATIENT INFORMATION PROVIDED";
	ELSE
        
	SELECT COUNT(*) INTO APPT_COUNT
	FROM PATIENT_APPOINTMENT 
	WHERE 
		PATIENT_ID IN 
		(
			SELECT PATIENT_ID 
			FROM PATIENT
			WHERE IF(EMAIL_ADDR IS NOT NULL, UPPER(PATIENT_EMAIL) = UPPER(EMAIL_ADDR), PATIENT_EMAIL IS NOT NULL)
				AND IF(PHONE_NUM IS NOT NULL, PATIENT_PHONE = PHONE_NUM, PATIENT_PHONE IS NOT NULL)
				AND PERSON_ID IN
				(
					SELECT PERSON_ID
					FROM PERSON
					WHERE IF(F_NAME IS NOT NULL, UPPER(FIRST_NAME) = UPPER(F_NAME), FIRST_NAME IS NOT NULL)
						AND IF(L_NAME IS NOT NULL, UPPER(LAST_NAME) = UPPER(L_NAME), LAST_NAME IS NOT NULL)
				)
                AND PATIENT_ID != 0
		);
        
        -- SET APPT_LIST = PT_ID;

		IF APPT_COUNT = 0 THEN
			SET APPT_LIST = "NO APPOINTMENT INFORMATION FOUND FOR PROVIDED PATIENT INFORMATION";
		ELSE
			SET APPT_LIST = NULL;
        
			-- SELECT COUNT(*) INTO APPT_COUNT FROM PATIENT_APPOINTMENT WHERE PATIENT_ID = PT_ID;
            -- SET APPT_LIST = CONCAT(PT_ID, ", ", APPT_COUNT);
        
			WHILE TEMP_COUNT <= APPT_COUNT DO
				WITH MY_CTE AS 
				(
					SELECT APPT_NOTES, APPT_ID, APPT_DAY, APPT_START_TIME, APPT_END_TIME, THERAPY_TYPE, PATIENT_APPOINTMENT.THERAPIST_ID, CONCAT(FIRST_NAME, " ", LAST_NAME) AS THERAPIST_NAME, 
						row_number() OVER ( order by APPT_ID ) as ROWNUM
					FROM PATIENT_APPOINTMENT, PERSON, THERAPIST
					WHERE PERSON.PERSON_ID = THERAPIST.PERSON_ID
					AND PATIENT_APPOINTMENT.THERAPIST_ID = THERAPIST.THERAPIST_ID
                    AND PATIENT_APPOINTMENT.PATIENT_ID != 0
					-- AND PATIENT_APPOINTMENT.PATIENT_ID = PT_ID
                    AND PATIENT_APPOINTMENT.PATIENT_ID IN 
					(
						SELECT PATIENT_ID 
						FROM PATIENT
						WHERE IF(EMAIL_ADDR IS NOT NULL, UPPER(PATIENT_EMAIL) = UPPER(EMAIL_ADDR), PATIENT_EMAIL IS NOT NULL)
							AND IF(PHONE_NUM IS NOT NULL, PATIENT_PHONE = PHONE_NUM, PATIENT_PHONE IS NOT NULL)
							AND PERSON_ID IN
							(
								SELECT PERSON_ID
								FROM PERSON
								WHERE IF(F_NAME IS NOT NULL, UPPER(FIRST_NAME) = UPPER(F_NAME), FIRST_NAME IS NOT NULL)
									AND IF(L_NAME IS NOT NULL, UPPER(LAST_NAME) = UPPER(L_NAME), LAST_NAME IS NOT NULL)
							)
					)
				)
				SELECT  APPT_NOTES, APPT_ID, APPT_DAY, APPT_START_TIME, APPT_END_TIME, THERAPY_TYPE, THERAPIST_ID, THERAPIST_NAME 
					INTO A_NOTES, A_ID, A_DAY, A_S_TIME, A_E_TIME, T_TYPE, T_ID, T_NAME
				FROM    MY_CTE
				WHERE   ROWNUM = TEMP_COUNT;
                
                IF A_NOTES IS NULL THEN
					SET A_NOTES = "";
				END IF;
                
				WITH MY_CTE_2 AS 
				(
					SELECT FIRST_NAME, LAST_NAME, PATIENT_EMAIL, PATIENT_PHONE, 
						row_number() OVER ( order by APPT_ID ) as ROWNUM
					FROM PATIENT_APPOINTMENT, PERSON, PATIENT
					WHERE PERSON.PERSON_ID = PATIENT.PERSON_ID
					AND PATIENT_APPOINTMENT.PATIENT_ID = PATIENT.PATIENT_ID
                    AND PATIENT_APPOINTMENT.PATIENT_ID != 0
					-- AND PATIENT_APPOINTMENT.PATIENT_ID = PT_ID
                    AND PATIENT_APPOINTMENT.PATIENT_ID IN 
					(
						SELECT PATIENT_ID 
						FROM PATIENT
						WHERE IF(EMAIL_ADDR IS NOT NULL, UPPER(PATIENT_EMAIL) = UPPER(EMAIL_ADDR), PATIENT_EMAIL IS NOT NULL)
							AND IF(PHONE_NUM IS NOT NULL, PATIENT_PHONE = PHONE_NUM, PATIENT_PHONE IS NOT NULL)
                            AND PATIENT_ID != 0
							AND PERSON_ID IN
							(
								SELECT PERSON_ID
								FROM PERSON
								WHERE IF(F_NAME IS NOT NULL, UPPER(FIRST_NAME) = UPPER(F_NAME), FIRST_NAME IS NOT NULL)
									AND IF(L_NAME IS NOT NULL, UPPER(LAST_NAME) = UPPER(L_NAME), LAST_NAME IS NOT NULL)
							)
					)
				)
				SELECT  FIRST_NAME, LAST_NAME, PATIENT_EMAIL, PATIENT_PHONE 
					INTO P_F_NAME, P_L_NAME, P_EMAIL, P_PHONE
				FROM    MY_CTE_2
				WHERE   ROWNUM = TEMP_COUNT;
				
				SET TEMP_COUNT = TEMP_COUNT + 1;
				
				IF APPT_LIST IS NULL THEN
					SET APPT_LIST = CONCAT(P_F_NAME, ", ", P_L_NAME, ", ", P_EMAIL, ", ", P_PHONE, ", ", T_ID, ", ", T_NAME, ", ", T_TYPE, ", ", A_ID, ", ", A_DAY, ", ", A_S_TIME, ", ", A_E_TIME, ", ", A_NOTES);
				else
					SET TEMP_APPT_LIST = APPT_LIST;
					SET APPT_LIST = CONCAT(TEMP_APPT_LIST, "; ", P_F_NAME, ", ", P_L_NAME, ", ", P_EMAIL, ", ", P_PHONE, ", ", T_ID, ", ", T_NAME, ", ", T_TYPE, ", ", A_ID, ", ", A_DAY, ", ", A_S_TIME, ", ", A_E_TIME, ", ", A_NOTES);
				END IF;
                
			END WHILE;
        
		END IF;
        
    END IF;
    
END IF;

-- IF LENGTH(APPT_LIST) > 16000 THEN
-- 	SET APPT_LIST = "TOO MANY ROWS RETURNED FOR GIVEN PATIENT INFORMATION, PLEASE NARROW SEARCH";
-- END IF;
    
    -- SET APPT_LIST = APPT_COUNT;
    
RETURN APPT_LIST;
END


CREATE DEFINER=`root`@`localhost` FUNCTION `RETURN_SCHEDULE_IDS`(T_ID INT) RETURNS varchar(2500) CHARSET utf8mb4
    DETERMINISTIC
BEGIN

DECLARE TEMP_COUNT INT DEFAULT 1;
DECLARE S_COUNT INT;
DECLARE S_ID INT;
DECLARE TEMP_ID_LIST VARCHAR(2500);
DECLARE ID_LIST VARCHAR(2500);

DECLARE CURR_DAY DATE;
DECLARE MAX_DAY DATE;

SET CURR_DAY = current_date();
SET MAX_DAY = adddate(CURR_DAY, INTERVAL 30 DAY);

SELECT COUNT(*) INTO S_COUNT FROM SCHEDULE WHERE THERAPIST_ID = T_ID AND SCHEDULE_DAY <= MAX_DAY;

IF S_COUNT != 0 THEN

			WHILE TEMP_COUNT <= S_COUNT DO
				WITH MY_CTE AS 
				(
					SELECT SCHEDULE_ID,
						row_number() OVER ( order by SCHEDULE_ID ) as ROWNUM
					FROM SCHEDULE
                    WHERE THERAPIST_ID = T_ID
						AND SCHEDULE_DAY <= MAX_DAY
				)
				SELECT  SCHEDULE_ID
					INTO S_ID
				FROM    MY_CTE
				WHERE   ROWNUM = TEMP_COUNT;
				
				SET TEMP_COUNT = TEMP_COUNT + 1;
				
				IF ID_LIST IS NULL THEN
					SET ID_LIST = S_ID;
				else
					SET TEMP_ID_LIST = ID_LIST;
					SET ID_LIST = CONCAT(TEMP_ID_LIST, ", ", S_ID);
				END IF;
                
			END WHILE;

ELSE
	SET ID_LIST = "NO IDS FOUND";
END IF;

-- SET TEMP_ID_LIST = ID_LIST;
-- SET ID_LIST = CONCAT(TEMP_ID_LIST, ", CURRENT DAY: ", CURR_DAY, ", MAX DAY: ", MAX_DAY);

RETURN ID_LIST;
END


CREATE DEFINER=`root`@`localhost` FUNCTION `RETURN_SCHEDULE_INFORMATION`(T_ID INT, START_DATE DATE, END_DATE DATE, SCHED_ID INT) RETURNS varchar(1500) CHARSET utf8mb4
    DETERMINISTIC
BEGIN

-- SET @NAME = "MON";
-- SELECT
	-- CASE
		-- WHEN @NAME = "MON" THEN MON_START_TIME
        -- WHEN @NAME = "TUE" THEN TUE_START_TIME
-- 	END
-- FROM DEFAULT_SCHEDULE WHERE THERAPIST_ID = 25;

-- DECLARE T_ID INT;
DECLARE S_DAY DATE;
DECLARE START_TIME TIME;
DECLARE END_TIME TIME;
DECLARE S_INFO VARCHAR(1500);
DECLARE TEST_COUNT INT;

DECLARE TEMP_COUNT INT DEFAULT 1;
DECLARE S_COUNT INT;
DECLARE S_ID INT;
DECLARE TEMP_S_INFO VARCHAR(2500);

IF (T_ID IS NULL) AND (START_DATE IS NULL) AND (END_DATE IS NULL) AND (SCHED_ID IS NULL) THEN

	SET S_INFO = "NO SCHEDULE PARAMETERS PROVIDED";

ELSE

IF SCHED_ID IS NOT NULL THEN

	SELECT COUNT(*) INTO TEST_COUNT FROM PATIENT_APPOINTMENT WHERE APPT_ID = SCHED_ID AND PATIENT_ID = 0;

	SELECT THERAPIST_ID, APPT_DAY, APPT_START_TIME, APPT_END_TIME
		INTO T_ID, S_DAY, START_TIME, END_TIME
	FROM PATIENT_APPOINTMENT
	WHERE APPT_ID = SCHED_ID
		AND PATIENT_ID = 0;

	IF TEST_COUNT != 0 THEN
		SET S_INFO = CONCAT(SCHED_ID, ", ", T_ID, ", ", S_DAY, ", ", START_TIME, ", ", END_TIME);
	ELSE
		SET S_INFO = "NOT A VALID SCHEDULE ID";
	END IF;
-- END IF;

ELSE

SELECT COUNT(*) INTO S_COUNT FROM PATIENT_APPOINTMENT WHERE THERAPIST_ID = T_ID AND APPT_DAY >= START_DATE AND APPT_DAY <= END_DATE AND PATIENT_ID = 0;

IF S_COUNT != 0 THEN

			WHILE TEMP_COUNT <= S_COUNT DO
				WITH MY_CTE AS 
				(
					SELECT APPT_ID, APPT_DAY, APPT_START_TIME, APPT_END_TIME,
						row_number() OVER ( order by APPT_DAY ) as ROWNUM
					FROM PATIENT_APPOINTMENT
                    WHERE THERAPIST_ID = T_ID
						AND APPT_DAY >= START_DATE AND APPT_DAY <= END_DATE
                        AND PATIENT_ID = 0
				)
				SELECT  APPT_ID, APPT_DAY, APPT_START_TIME, APPT_END_TIME
					INTO S_ID, S_DAY, START_TIME, END_TIME
				FROM    MY_CTE
				WHERE   ROWNUM = TEMP_COUNT;
				
				SET TEMP_COUNT = TEMP_COUNT + 1;
				
				IF S_INFO IS NULL THEN
					SET S_INFO = CONCAT(S_ID, ", ", T_ID, ", ", S_DAY, ", ", START_TIME, ", ", END_TIME);
				else
					SET TEMP_S_INFO = S_INFO;
					SET S_INFO = CONCAT(TEMP_S_INFO, "; ", S_ID, ", ", T_ID, ", ", S_DAY, ", ", START_TIME, ", ", END_TIME);
				END IF;
                
			END WHILE;

ELSE
	SET S_INFO = "NO AVAILABILITY FOUND";
END IF;

END IF;

END IF;

-- SET S_INFO = TEMP_COUNT;

RETURN S_INFO;
END


CREATE DEFINER=`root`@`localhost` FUNCTION `RETURN_USER_INFO`(P_ID INT) RETURNS varchar(1000) CHARSET utf8mb4
    DETERMINISTIC
BEGIN

DECLARE FOUND_TYPE VARCHAR(15);
DECLARE F_NAME VARCHAR(30);
DECLARE L_NAME VARCHAR(30);

DECLARE S_ID INT;
DECLARE A_ID INT;
DECLARE T_ID INT;

DECLARE EMAIL VARCHAR(100);
DECLARE PHONE VARCHAR(20);

DECLARE T_CERTS VARCHAR(80);

DECLARE NOTIF VARCHAR(10);

-- PLACE HOLDER FOR WHEN THIS TABLE IS BUILT
-- DECLARE APPT_COUNT INT;

DECLARE USER_INFO VARCHAR(1000);

SELECT PERSON_TYPE, FIRST_NAME, LAST_NAME INTO FOUND_TYPE, F_NAME, L_NAME 
FROM PERSON
WHERE PERSON_ID = P_ID;

IF UPPER(FOUND_TYPE) = "SCHEDULER" THEN
	SELECT SCHEDULER_ID, SCHEDULER_EMAIL, SCHEDULER_PHONE INTO S_ID, EMAIL, PHONE
    FROM SCHEDULER
    WHERE PERSON_ID = P_ID;
    
    IF EMAIL IS NULL THEN
		SET EMAIL = "NULL";
	END IF;
    IF PHONE IS NULL THEN
		SET PHONE = "NULL";
	END IF;
    
    SET USER_INFO = concat(F_NAME, ", ", L_NAME, ", ", P_ID, ", ", S_ID, ", ", EMAIL, ", ", PHONE);
ELSEIF UPPER(FOUND_TYPE) = "ADMINISTRATOR" THEN
	SELECT ADMIN_ID, ADMIN_EMAIL, ADMIN_PHONE INTO A_ID, EMAIL, PHONE
    FROM ADMINISTRATOR
    WHERE PERSON_ID = P_ID;
    
    IF EMAIL IS NULL THEN
		SET EMAIL = "NULL";
	END IF;
    IF PHONE IS NULL THEN
		SET PHONE = "NULL";
	END IF;
    
    SET USER_INFO = concat(F_NAME, ", ", L_NAME, ", ", P_ID, ", ", A_ID, ", ", EMAIL, ", ", PHONE);
ELSEIF UPPER(FOUND_TYPE) = "THERAPIST" THEN
	SELECT THERAPIST_ID, THERAPIST_EMAIL, THERAPIST_PHONE INTO T_ID, EMAIL, PHONE
    FROM THERAPIST
    WHERE PERSON_ID = P_ID;
    
    -- SET APPT_COUNT = 0;
    
    IF EMAIL IS NULL THEN
		SET EMAIL = "NULL";
	END IF;
    IF PHONE IS NULL THEN
		SET PHONE = "NULL";
	END IF;
    
    -- SELECT GET_THERAPIST_CERTS(T_ID) INTO T_CERTS;
    -- CALL GET_THERAPIST_CERTS(T_ID, @T_CERTS);
    -- SET T_CERTS = @T_CERTS;
    SELECT THERAPIST_APPT_NOTIF(T_ID) INTO NOTIF;
    
    SET USER_INFO = concat(F_NAME, ", ", L_NAME, ", ", P_ID, ", ", T_ID, ", ", EMAIL, ", ", PHONE, ", ", NOTIF);
END IF;

RETURN USER_INFO;
END


CREATE DEFINER=`root`@`localhost` FUNCTION `RETURN_USER_TABLE`(COL_NAME VARCHAR(10), RETURN_ORDER VARCHAR(5), RETURN_TYPE VARCHAR(15)) RETURNS varchar(16000) CHARSET utf8mb4
    DETERMINISTIC
BEGIN

DECLARE I INT;
DECLARE F VARCHAR(30);
DECLARE L VARCHAR(30);
DECLARE T VARCHAR(20);
DECLARE N VARCHAR(30);
DECLARE P VARCHAR(30);

DECLARE TEMP_LIST VARCHAR(16000);
DECLARE TABLE_LIST VARCHAR(16000);

DECLARE TEMP_COUNT INT DEFAULT 1;
DECLARE TABLE_COUNT INT;

DECLARE R_TYPE VARCHAR(15) DEFAULT UPPER(RETURN_TYPE);

IF R_TYPE IS NULL THEN
	SELECT COUNT(*) INTO TABLE_COUNT FROM PERSON WHERE PERSON_TYPE != "PATIENT";
ELSE
	SELECT COUNT(*) INTO TABLE_COUNT FROM PERSON WHERE PERSON_TYPE = R_TYPE;
END IF;

IF TABLE_COUNT != 0 THEN

			WHILE TEMP_COUNT <= TABLE_COUNT DO
            IF RETURN_ORDER = "DESC" THEN
            IF COL_NAME = "PERSON_ID" OR COL_NAME IS NULL THEN
				WITH MY_CTE AS 
				(
					SELECT P.PERSON_ID, FIRST_NAME, LAST_NAME, PERSON_TYPE, USERNAME, USER_PASSWORD,
						row_number() OVER 
                        ( 
                            -- ORDER BY
                            -- CASE COL_NAME
								-- WHEN "PERSON_ID" THEN PERSON_ID
								-- WHEN "FIRST_NAME" THEN FIRST_NAME
								-- WHEN "LAST_NAME" THEN LAST_NAME
								-- WHEN NULL THEN PERSON_ID
							-- END
                            -- DESC
						) as ROWNUM
					FROM PERSON P, LOGIN_INFORMATION L
                    WHERE P.PERSON_ID = L.PERSON_ID AND
                    IF(R_TYPE IS NOT NULL, PERSON_TYPE = R_TYPE, PERSON_TYPE != "PATIENT")
						ORDER BY
                            -- CASE
								-- WHEN COL_NAME = "PERSON_ID" THEN PERSON_ID
								-- WHEN COL_NAME = "FIRST_NAME" THEN FIRST_NAME
								-- WHEN COL_NAME = "LAST_NAME" THEN LAST_NAME
								-- WHEN COL_NAME IS NULL THEN PERSON_ID
							-- END
                            PERSON_ID DESC
				)
				SELECT PERSON_ID, FIRST_NAME, LAST_NAME, PERSON_TYPE, USERNAME, USER_PASSWORD
					INTO I, F, L, T, N, P
				FROM    MY_CTE
				WHERE   ROWNUM = TEMP_COUNT;
                
                ELSE
                
				WITH MY_CTE AS 
				(
					SELECT P.PERSON_ID, FIRST_NAME, LAST_NAME, PERSON_TYPE, USERNAME, USER_PASSWORD,
						row_number() OVER 
                        ( 
                            -- ORDER BY
                            -- CASE COL_NAME
								-- WHEN "PERSON_ID" THEN PERSON_ID
								-- WHEN "FIRST_NAME" THEN FIRST_NAME
								-- WHEN "LAST_NAME" THEN LAST_NAME
								-- WHEN NULL THEN PERSON_ID
							-- END
                            -- DESC
						) as ROWNUM
					FROM PERSON P, LOGIN_INFORMATION L
                    WHERE P.PERSON_ID = L.PERSON_ID AND
                    IF(R_TYPE IS NOT NULL, PERSON_TYPE = R_TYPE, PERSON_TYPE != "PATIENT")
						ORDER BY
                            CASE
								WHEN COL_NAME = "FIRST_NAME" THEN FIRST_NAME
								WHEN COL_NAME = "LAST_NAME" THEN LAST_NAME
							END
                            DESC
				)
				SELECT PERSON_ID, FIRST_NAME, LAST_NAME, PERSON_TYPE, USERNAME, USER_PASSWORD
					INTO I, F, L, T, N, P
				FROM    MY_CTE
				WHERE   ROWNUM = TEMP_COUNT;
                
                END IF;
                
                else
				IF COL_NAME = "PERSON_ID" OR COL_NAME IS NULL THEN
				WITH MY_CTE AS 
				(
					SELECT P.PERSON_ID, FIRST_NAME, LAST_NAME, PERSON_TYPE, USERNAME, USER_PASSWORD,
						row_number() OVER 
                        ( 
                            -- ORDER BY
                            -- CASE COL_NAME
								-- WHEN "PERSON_ID" THEN PERSON_ID
								-- WHEN "FIRST_NAME" THEN FIRST_NAME
								-- WHEN "LAST_NAME" THEN LAST_NAME
								-- WHEN NULL THEN PERSON_ID
							-- END
                            -- DESC
						) as ROWNUM
					FROM PERSON P, LOGIN_INFORMATION L
                    WHERE P.PERSON_ID = L.PERSON_ID AND
                    IF(R_TYPE IS NOT NULL, PERSON_TYPE = R_TYPE, PERSON_TYPE != "PATIENT")
						ORDER BY
                            -- CASE
								-- WHEN COL_NAME = "PERSON_ID" THEN PERSON_ID
								-- WHEN COL_NAME = "FIRST_NAME" THEN FIRST_NAME
								-- WHEN COL_NAME = "LAST_NAME" THEN LAST_NAME
								-- WHEN COL_NAME IS NULL THEN PERSON_ID
							-- END
                            PERSON_ID ASC
				)
				SELECT PERSON_ID, FIRST_NAME, LAST_NAME, PERSON_TYPE, USERNAME, USER_PASSWORD
					INTO I, F, L, T, N, P
				FROM    MY_CTE
				WHERE   ROWNUM = TEMP_COUNT;
                
                ELSE
                
				WITH MY_CTE AS 
				(
					SELECT P.PERSON_ID, FIRST_NAME, LAST_NAME, PERSON_TYPE, USERNAME, USER_PASSWORD,
						row_number() OVER 
                        ( 
                            -- ORDER BY
                            -- CASE COL_NAME
								-- WHEN "PERSON_ID" THEN PERSON_ID
								-- WHEN "FIRST_NAME" THEN FIRST_NAME
								-- WHEN "LAST_NAME" THEN LAST_NAME
								-- WHEN NULL THEN PERSON_ID
							-- END
                            -- DESC
						) as ROWNUM
					FROM PERSON P, LOGIN_INFORMATION L
                    WHERE P.PERSON_ID = L.PERSON_ID AND
                    IF(R_TYPE IS NOT NULL, PERSON_TYPE = R_TYPE, PERSON_TYPE != "PATIENT")
						ORDER BY
                            CASE
								WHEN COL_NAME = "FIRST_NAME" THEN FIRST_NAME
								WHEN COL_NAME = "LAST_NAME" THEN LAST_NAME
							END
                            ASC
				)
				SELECT PERSON_ID, FIRST_NAME, LAST_NAME, PERSON_TYPE, USERNAME, USER_PASSWORD
					INTO I, F, L, T, N, P
				FROM    MY_CTE
				WHERE   ROWNUM = TEMP_COUNT;
                
                END IF;
                
                END IF;
				
				SET TEMP_COUNT = TEMP_COUNT + 1;
				
				IF TABLE_LIST IS NULL THEN
					SET TABLE_LIST = CONCAT(I, ", ", F, ", ", L, ", ", T, ", ", N, ", ", P);
				else
					SET TEMP_LIST = TABLE_LIST;
					SET TABLE_LIST = CONCAT(TEMP_LIST, "; ", I, ", ", F, ", ", L, ", ", T, ", ", N, ", ", P);
				END IF;
                
			END WHILE;

-- ELSE
	-- SET ID_LIST = "NO IDS FOUND";
END IF;

RETURN TABLE_LIST;
END


CREATE DEFINER=`root`@`localhost` FUNCTION `THERAPIST_APPT_NOTIF`(T_ID INT) RETURNS varchar(16000) CHARSET utf8mb4
    DETERMINISTIC
BEGIN

DECLARE NOTIF VARCHAR(16000) DEFAULT "FALSE";
-- DECLARE COUNT INT;

-- AND (LIST_IDS != APPT_ID_LIST) 

DECLARE LIST_IDS VARCHAR(16000);
DECLARE LIST_COUNT INT;

DECLARE TEMP_COUNT INT DEFAULT 1;
DECLARE A_ID INT;

DECLARE APPT_ID_LIST VARCHAR(16000);
DECLARE APPT_ID_LIST_COUNT INT;

DECLARE A_VAR VARCHAR(10);
DECLARE FOUND_ID VARCHAR(5) DEFAULT "FALSE";

SELECT APPT_LIST INTO LIST_IDS
FROM THERAPIST_APPOINTMENTS 
WHERE THERAPIST_ID = T_ID;

SELECT RETURN_APPT_IDS(T_ID, CURDATE(), "9999-12-31") INTO APPT_ID_LIST;

IF APPT_ID_LIST != LIST_IDS THEN
IF (LIST_IDS IS NOT NULL) AND (APPT_ID_LIST != "NO IDS FOUND") THEN
	SELECT (LENGTH(LIST_IDS) - LENGTH(REPLACE(LIST_IDS, ',', ''))) + 1 INTO LIST_COUNT;
-- ELSE
	-- SET APPT_COUNT = 0;
-- END IF;
    
-- IF COUNT > 0 THEN
	-- SET NOTIF = "TRUE";
-- END IF;

-- SELECT COUNT(*) INTO APPT_COUNT
-- FROM PATIENT_APPOINTMENT
-- WHERE THERAPIST_ID = T_ID
	-- AND APPT_DAY >= CURDATE();

-- IF APPT_COUNT != 0 THEN

			WHILE TEMP_COUNT <= LIST_COUNT DO
                
                SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(LIST_IDS, ',', TEMP_COUNT), ',', -1) INTO A_ID;
                
                SELECT REPLACE(APPT_ID_LIST, A_ID, "NULL") INTO APPT_ID_LIST;
				
				SET TEMP_COUNT = TEMP_COUNT + 1;
				
				-- IF ID_LIST IS NULL THEN
					-- SET ID_LIST = A_ID;
				-- else
					-- SET TEMP_ID_LIST = ID_LIST;
					-- SET ID_LIST = CONCAT(TEMP_ID_LIST, ", ", A_ID);
				-- END IF;
                
			END WHILE;
            
            SELECT (LENGTH(APPT_ID_LIST) - LENGTH(REPLACE(APPT_ID_LIST, ',', ''))) + 1 INTO APPT_ID_LIST_COUNT;

			SET TEMP_COUNT = 1;
			WHILE (TEMP_COUNT <= APPT_ID_LIST_COUNT) AND FOUND_ID = "FALSE" DO
				SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(APPT_ID_LIST, ',', TEMP_COUNT), ',', -1) INTO A_VAR;
				IF A_VAR NOT LIKE "%NULL%" THEN
					SET FOUND_ID = "TRUE";
				END IF;
				SET TEMP_COUNT = TEMP_COUNT + 1;
			END WHILE;
            
            IF FOUND_ID = "TRUE" THEN
				SET NOTIF = "TRUE";
			END IF;
            
            -- SET NOTIF = A_VAR;
            
ELSE

	IF APPT_ID_LIST != "NO IDS FOUND" THEN
		SELECT (LENGTH(APPT_ID_LIST) - LENGTH(REPLACE(APPT_ID_LIST, ',', ''))) + 1 INTO APPT_ID_LIST_COUNT;

	IF APPT_ID_LIST_COUNT > 0 THEN
		SET NOTIF = "TRUE";
	END IF;
	END IF;
    
END IF;
END IF;

-- SET NOTIF = APPT_ID_LIST;

RETURN NOTIF;
END